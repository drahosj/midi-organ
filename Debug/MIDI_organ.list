
MIDI_organ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000423c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004608  08004608  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004610  08004610  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000bc  080046d4  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080046d4  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af89  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e68  00000000  00000000  0002b075  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002cee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000828  00000000  00000000  0002d838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f2e  00000000  00000000  0002e060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f26  00000000  00000000  00044f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087466  00000000  00000000  0004deb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d531a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b90  00000000  00000000  000d5398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000bc 	.word	0x200000bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043c4 	.word	0x080043c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	080043c4 	.word	0x080043c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	4b44      	ldr	r3, [pc, #272]	; (80006ac <MX_GPIO_Init+0x12c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a43      	ldr	r2, [pc, #268]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b41      	ldr	r3, [pc, #260]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b3d      	ldr	r3, [pc, #244]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a3c      	ldr	r2, [pc, #240]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b36      	ldr	r3, [pc, #216]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a35      	ldr	r2, [pc, #212]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b33      	ldr	r3, [pc, #204]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <MX_GPIO_Init+0x12c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHAIN1_CLRN_GPIO_Port, CHAIN1_CLRN_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	4829      	ldr	r0, [pc, #164]	; (80006b0 <MX_GPIO_Init+0x130>)
 800060c:	f001 f9aa 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHAIN1_PLN_GPIO_Port, CHAIN1_PLN_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	4827      	ldr	r0, [pc, #156]	; (80006b4 <MX_GPIO_Init+0x134>)
 8000616:	f001 f9a5 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHAIN1_LAT_GPIO_Port, CHAIN1_LAT_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	4826      	ldr	r0, [pc, #152]	; (80006b8 <MX_GPIO_Init+0x138>)
 8000620:	f001 f9a0 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_GPIO_Init+0x13c>)
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	481e      	ldr	r0, [pc, #120]	; (80006b4 <MX_GPIO_Init+0x134>)
 800063a:	f001 f811 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHAIN1_CLRN_Pin;
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CHAIN1_CLRN_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4816      	ldr	r0, [pc, #88]	; (80006b0 <MX_GPIO_Init+0x130>)
 8000656:	f001 f803 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHAIN1_PLN_Pin;
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CHAIN1_PLN_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <MX_GPIO_Init+0x134>)
 8000672:	f000 fff5 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHAIN1_LAT_Pin;
 8000676:	2340      	movs	r3, #64	; 0x40
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CHAIN1_LAT_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	480a      	ldr	r0, [pc, #40]	; (80006b8 <MX_GPIO_Init+0x138>)
 800068e:	f000 ffe7 	bl	8001660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	2028      	movs	r0, #40	; 0x28
 8000698:	f000 ffab 	bl	80015f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800069c:	2028      	movs	r0, #40	; 0x28
 800069e:	f000 ffc4 	bl	800162a <HAL_NVIC_EnableIRQ>

}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020800 	.word	0x40020800
 80006b8:	40020400 	.word	0x40020400
 80006bc:	10210000 	.word	0x10210000

080006c0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	unsigned char c = ch;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 80006ce:	f107 010f 	add.w	r1, r7, #15
 80006d2:	230a      	movs	r3, #10
 80006d4:	2201      	movs	r2, #1
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <__io_putchar+0x28>)
 80006d8:	f002 fa45 	bl	8002b66 <HAL_UART_Transmit>

	return 0;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000190 	.word	0x20000190

080006ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
	if (pin == B1_Pin) {
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006fc:	d102      	bne.n	8000704 <HAL_GPIO_EXTI_Callback+0x18>
		/* Set ghetto semaphore */
		flag = 1;
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <HAL_GPIO_EXTI_Callback+0x24>)
 8000700:	2201      	movs	r2, #1
 8000702:	601a      	str	r2, [r3, #0]
	}
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	200000d8 	.word	0x200000d8

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0b8      	sub	sp, #224	; 0xe0
 8000718:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f000 fdfb 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f9af 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f7ff ff2d 	bl	8000580 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000726:	f000 fb33 	bl	8000d90 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800072a:	f000 fd11 	bl	8001150 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800072e:	f000 fce5 	bl	80010fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello, world!\n");
 8000732:	48be      	ldr	r0, [pc, #760]	; (8000a2c <main+0x318>)
 8000734:	f002 ff3c 	bl	80035b0 <puts>
  printf("Build: " __DATE__ " " __TIME__ "\n");
 8000738:	48bd      	ldr	r0, [pc, #756]	; (8000a30 <main+0x31c>)
 800073a:	f002 ff39 	bl	80035b0 <puts>

  printf("Initializing chains\n");
 800073e:	48bd      	ldr	r0, [pc, #756]	; (8000a34 <main+0x320>)
 8000740:	f002 ff36 	bl	80035b0 <puts>
  int nchains = scanchain_init_all(chain_table);
 8000744:	48bc      	ldr	r0, [pc, #752]	; (8000a38 <main+0x324>)
 8000746:	f000 fab5 	bl	8000cb4 <scanchain_init_all>
 800074a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  if (nchains > 0) {
 800074e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000752:	2b00      	cmp	r3, #0
 8000754:	dd05      	ble.n	8000762 <main+0x4e>
	  printf("Initialized %d chain(s).\n", nchains);
 8000756:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800075a:	48b8      	ldr	r0, [pc, #736]	; (8000a3c <main+0x328>)
 800075c:	f002 fea0 	bl	80034a0 <iprintf>
 8000760:	e009      	b.n	8000776 <main+0x62>
  } else {
	  printf("Error with chain definitions or initialization!\n");
 8000762:	48b7      	ldr	r0, [pc, #732]	; (8000a40 <main+0x32c>)
 8000764:	f002 ff24 	bl	80035b0 <puts>
	  return -1;
 8000768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076c:	e15a      	b.n	8000a24 <main+0x310>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // printf("Waiting on interrupt event...\n");

	  while (flag == 0) {
 800076e:	e002      	b.n	8000776 <main+0x62>
		  HAL_Delay(50);
 8000770:	2032      	movs	r0, #50	; 0x32
 8000772:	f000 fe41 	bl	80013f8 <HAL_Delay>
	  while (flag == 0) {
 8000776:	4bb3      	ldr	r3, [pc, #716]	; (8000a44 <main+0x330>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f8      	beq.n	8000770 <main+0x5c>
	  }

	  printf("Scanning...");
 800077e:	48b2      	ldr	r0, [pc, #712]	; (8000a48 <main+0x334>)
 8000780:	f002 fe8e 	bl	80034a0 <iprintf>
	  uint8_t scanbuf[16];
	  HAL_StatusTypeDef ret = scanchain_scan(&chain_table[0], scanbuf);
 8000784:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000788:	4619      	mov	r1, r3
 800078a:	48ab      	ldr	r0, [pc, #684]	; (8000a38 <main+0x324>)
 800078c:	f000 fab7 	bl	8000cfe <scanchain_scan>
 8000790:	4603      	mov	r3, r0
 8000792:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	  if (ret == HAL_OK) {
 8000796:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800079a:	2b00      	cmp	r3, #0
 800079c:	d103      	bne.n	80007a6 <main+0x92>
		  printf("Success!\n");
 800079e:	48ab      	ldr	r0, [pc, #684]	; (8000a4c <main+0x338>)
 80007a0:	f002 ff06 	bl	80035b0 <puts>
 80007a4:	e005      	b.n	80007b2 <main+0x9e>
	  } else {
		  printf("Failed! (%d)\n", ret);
 80007a6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80007aa:	4619      	mov	r1, r3
 80007ac:	48a8      	ldr	r0, [pc, #672]	; (8000a50 <main+0x33c>)
 80007ae:	f002 fe77 	bl	80034a0 <iprintf>
	  }
	  printf("CHAIN 1: ");
 80007b2:	48a8      	ldr	r0, [pc, #672]	; (8000a54 <main+0x340>)
 80007b4:	f002 fe74 	bl	80034a0 <iprintf>
	  for (int i = 0; i < chain_table[0].chain_length; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80007be:	e01d      	b.n	80007fc <main+0xe8>
		  /* Also invert the values for MIDI logic */
		  scanbuf[i] = scanbuf[i] ^ 0xff;
 80007c0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80007c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007c8:	4413      	add	r3, r2
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	43db      	mvns	r3, r3
 80007ce:	b2d9      	uxtb	r1, r3
 80007d0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80007d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007d8:	4413      	add	r3, r2
 80007da:	460a      	mov	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]

		  printf("%02X ", scanbuf[i]);
 80007de:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80007e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4619      	mov	r1, r3
 80007ec:	489a      	ldr	r0, [pc, #616]	; (8000a58 <main+0x344>)
 80007ee:	f002 fe57 	bl	80034a0 <iprintf>
	  for (int i = 0; i < chain_table[0].chain_length; i++) {
 80007f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007f6:	3301      	adds	r3, #1
 80007f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80007fc:	2209      	movs	r2, #9
 80007fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000802:	4293      	cmp	r3, r2
 8000804:	dbdc      	blt.n	80007c0 <main+0xac>
	  };
	  printf("\n");
 8000806:	200a      	movs	r0, #10
 8000808:	f002 fe62 	bl	80034d0 <putchar>


	  struct midi_event events[MAX_EVENTS];
	  int nevents = midi_getevents(chain1_old, scanbuf, chain_table[0].chain_length, events, MAX_EVENTS);
 800080c:	2009      	movs	r0, #9
 800080e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000812:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000816:	2310      	movs	r3, #16
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	4613      	mov	r3, r2
 800081c:	4602      	mov	r2, r0
 800081e:	488f      	ldr	r0, [pc, #572]	; (8000a5c <main+0x348>)
 8000820:	f000 f9a1 	bl	8000b66 <midi_getevents>
 8000824:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	  memcpy(chain1_old, scanbuf, chain_table[0].chain_length);
 8000828:	2309      	movs	r3, #9
 800082a:	461a      	mov	r2, r3
 800082c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000830:	4619      	mov	r1, r3
 8000832:	488a      	ldr	r0, [pc, #552]	; (8000a5c <main+0x348>)
 8000834:	f002 fe20 	bl	8003478 <memcpy>

	  if (nevents) {
 8000838:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d096      	beq.n	800076e <main+0x5a>
		  uint8_t midibuf[MAX_EVENTS * 3];
		  printf("EVENTS: \n");
 8000840:	4887      	ldr	r0, [pc, #540]	; (8000a60 <main+0x34c>)
 8000842:	f002 feb5 	bl	80035b0 <puts>
		  for (int i = 0; i < nevents; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800084c:	e0a7      	b.n	800099e <main+0x28a>
			  /* Remap note numbers */
			  events[i].number = notemap1[events[i].number];
 800084e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000858:	4413      	add	r3, r2
 800085a:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 800085e:	4a81      	ldr	r2, [pc, #516]	; (8000a64 <main+0x350>)
 8000860:	5cd3      	ldrb	r3, [r2, r3]
 8000862:	461a      	mov	r2, r3
 8000864:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800086e:	440b      	add	r3, r1
 8000870:	f843 2ca4 	str.w	r2, [r3, #-164]
			  if (events[i].type == MIDI_NOTE_ON) {
 8000874:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800087e:	4413      	add	r3, r2
 8000880:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d137      	bne.n	80008f8 <main+0x1e4>
				  printf("\t - NOTE_ON(%d)\n", events[i].number);
 8000888:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000892:	4413      	add	r3, r2
 8000894:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8000898:	4619      	mov	r1, r3
 800089a:	4873      	ldr	r0, [pc, #460]	; (8000a68 <main+0x354>)
 800089c:	f002 fe00 	bl	80034a0 <iprintf>
				  midibuf[i * 3] = 0x91;
 80008a0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80008ae:	4413      	add	r3, r2
 80008b0:	2291      	movs	r2, #145	; 0x91
 80008b2:	f803 2cd8 	strb.w	r2, [r3, #-216]
				  midibuf[(i * 3) + 1] = events[i].number;
 80008b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80008c0:	4413      	add	r3, r2
 80008c2:	f853 1ca4 	ldr.w	r1, [r3, #-164]
 80008c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80008ca:	4613      	mov	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4413      	add	r3, r2
 80008d0:	3301      	adds	r3, #1
 80008d2:	b2ca      	uxtb	r2, r1
 80008d4:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80008d8:	440b      	add	r3, r1
 80008da:	f803 2cd8 	strb.w	r2, [r3, #-216]
				  midibuf[(i * 3) + 2] = 0x7f;
 80008de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80008e2:	4613      	mov	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	3302      	adds	r3, #2
 80008ea:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80008ee:	4413      	add	r3, r2
 80008f0:	227f      	movs	r2, #127	; 0x7f
 80008f2:	f803 2cd8 	strb.w	r2, [r3, #-216]
 80008f6:	e04d      	b.n	8000994 <main+0x280>
			  } else if (events[i].type == MIDI_NOTE_OFF) {
 80008f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000902:	4413      	add	r3, r2
 8000904:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d137      	bne.n	800097c <main+0x268>
				  printf("\t - NOTE_OFF(%d)\n", events[i].number);
 800090c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000916:	4413      	add	r3, r2
 8000918:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 800091c:	4619      	mov	r1, r3
 800091e:	4853      	ldr	r0, [pc, #332]	; (8000a6c <main+0x358>)
 8000920:	f002 fdbe 	bl	80034a0 <iprintf>
				  midibuf[i * 3] = 0x81;
 8000924:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000932:	4413      	add	r3, r2
 8000934:	2281      	movs	r2, #129	; 0x81
 8000936:	f803 2cd8 	strb.w	r2, [r3, #-216]
				  midibuf[(i * 3) + 1] = events[i].number;
 800093a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000944:	4413      	add	r3, r2
 8000946:	f853 1ca4 	ldr.w	r1, [r3, #-164]
 800094a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	3301      	adds	r3, #1
 8000956:	b2ca      	uxtb	r2, r1
 8000958:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800095c:	440b      	add	r3, r1
 800095e:	f803 2cd8 	strb.w	r2, [r3, #-216]
				  midibuf[(i * 3) + 2] = 0x7f;
 8000962:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000966:	4613      	mov	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	4413      	add	r3, r2
 800096c:	3302      	adds	r3, #2
 800096e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000972:	4413      	add	r3, r2
 8000974:	227f      	movs	r2, #127	; 0x7f
 8000976:	f803 2cd8 	strb.w	r2, [r3, #-216]
 800097a:	e00b      	b.n	8000994 <main+0x280>
			  } else {
				  printf("\t - UNKNOWN(%d)\n", events[i].number);
 800097c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000986:	4413      	add	r3, r2
 8000988:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 800098c:	4619      	mov	r1, r3
 800098e:	4838      	ldr	r0, [pc, #224]	; (8000a70 <main+0x35c>)
 8000990:	f002 fd86 	bl	80034a0 <iprintf>
		  for (int i = 0; i < nevents; i++) {
 8000994:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000998:	3301      	adds	r3, #1
 800099a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800099e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80009a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80009a6:	429a      	cmp	r2, r3
 80009a8:	f6ff af51 	blt.w	800084e <main+0x13a>
			  }
		  }
		  printf("MIDI Buffer to Transmit: ");
 80009ac:	4831      	ldr	r0, [pc, #196]	; (8000a74 <main+0x360>)
 80009ae:	f002 fd77 	bl	80034a0 <iprintf>
		  for (int i = 0; i < nevents * 3; i++) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80009b8:	e00d      	b.n	80009d6 <main+0x2c2>
			  printf("%02X ", midibuf[i]);
 80009ba:	463a      	mov	r2, r7
 80009bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	4824      	ldr	r0, [pc, #144]	; (8000a58 <main+0x344>)
 80009c8:	f002 fd6a 	bl	80034a0 <iprintf>
		  for (int i = 0; i < nevents * 3; i++) {
 80009cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80009d0:	3301      	adds	r3, #1
 80009d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80009d6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbe8      	blt.n	80009ba <main+0x2a6>
		  }
		  printf("\n");
 80009e8:	200a      	movs	r0, #10
 80009ea:	f002 fd71 	bl	80034d0 <putchar>
		  ret = HAL_UART_Transmit(&huart1, midibuf, nevents * 3, 100);
 80009ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	0052      	lsls	r2, r2, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4639      	mov	r1, r7
 80009fe:	2364      	movs	r3, #100	; 0x64
 8000a00:	481d      	ldr	r0, [pc, #116]	; (8000a78 <main+0x364>)
 8000a02:	f002 f8b0 	bl	8002b66 <HAL_UART_Transmit>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		  if (ret) {
 8000a0c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f43f aeac 	beq.w	800076e <main+0x5a>
			  printf("UART Transmit Error %d\n", ret);
 8000a16:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4817      	ldr	r0, [pc, #92]	; (8000a7c <main+0x368>)
 8000a1e:	f002 fd3f 	bl	80034a0 <iprintf>
  {
 8000a22:	e6a4      	b.n	800076e <main+0x5a>

	  /* Free run */
	  //flag = 0;
  }
  /* USER CODE END 3 */
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	37d8      	adds	r7, #216	; 0xd8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	080043dc 	.word	0x080043dc
 8000a30:	080043ec 	.word	0x080043ec
 8000a34:	08004408 	.word	0x08004408
 8000a38:	08004520 	.word	0x08004520
 8000a3c:	0800441c 	.word	0x0800441c
 8000a40:	08004438 	.word	0x08004438
 8000a44:	200000d8 	.word	0x200000d8
 8000a48:	08004468 	.word	0x08004468
 8000a4c:	08004474 	.word	0x08004474
 8000a50:	08004480 	.word	0x08004480
 8000a54:	08004490 	.word	0x08004490
 8000a58:	0800449c 	.word	0x0800449c
 8000a5c:	200000e8 	.word	0x200000e8
 8000a60:	080044a4 	.word	0x080044a4
 8000a64:	20000000 	.word	0x20000000
 8000a68:	080044b0 	.word	0x080044b0
 8000a6c:	080044c4 	.word	0x080044c4
 8000a70:	080044d8 	.word	0x080044d8
 8000a74:	080044ec 	.word	0x080044ec
 8000a78:	20000150 	.word	0x20000150
 8000a7c:	08004508 	.word	0x08004508

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	2230      	movs	r2, #48	; 0x30
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fcfd 	bl	800348e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <SystemClock_Config+0xd0>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a28      	ldr	r2, [pc, #160]	; (8000b50 <SystemClock_Config+0xd0>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <SystemClock_Config+0xd0>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <SystemClock_Config+0xd4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000acc:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <SystemClock_Config+0xd4>)
 8000ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <SystemClock_Config+0xd4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	2302      	movs	r3, #2
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000af4:	2310      	movs	r3, #16
 8000af6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000afc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000afe:	2304      	movs	r3, #4
 8000b00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b02:	2307      	movs	r3, #7
 8000b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0320 	add.w	r3, r7, #32
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 ff5c 	bl	80019c8 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b16:	f000 f81f 	bl	8000b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	2102      	movs	r1, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 f9b5 	bl	8001ea8 <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b44:	f000 f808 	bl	8000b58 <Error_Handler>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3750      	adds	r7, #80	; 0x50
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40007000 	.word	0x40007000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <midi_getevents>:

#include "midi.h"


int midi_getevents(uint8_t * old, uint8_t * new, int chainlen, struct midi_event * eventbuf, int maxevents)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b08b      	sub	sp, #44	; 0x2c
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	603b      	str	r3, [r7, #0]
	int event_index = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < chainlen; i++) {
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	e066      	b.n	8000c4c <midi_getevents+0xe6>
		if (old[i] != new[i]) {
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	440b      	add	r3, r1
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d059      	beq.n	8000c46 <midi_getevents+0xe0>
			for (int j = 0; j < 8; j++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	e053      	b.n	8000c40 <midi_getevents+0xda>
				int o = (old[i] >> j) & 0x01;
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa42 f303 	asr.w	r3, r2, r3
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
				int n = (new[i] >> j) & 0x01;
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	fa42 f303 	asr.w	r3, r2, r3
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]

				if (n && !o) {
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d017      	beq.n	8000bfa <midi_getevents+0x94>
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d114      	bne.n	8000bfa <midi_getevents+0x94>
					eventbuf[event_index].type = MIDI_NOTE_ON;
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
					eventbuf[event_index].number = (i * 8) + (7 - j);
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	00d9      	lsls	r1, r3, #3
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0207 	rsb	r2, r3, #7
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	6838      	ldr	r0, [r7, #0]
 8000bec:	4403      	add	r3, r0
 8000bee:	440a      	add	r2, r1
 8000bf0:	605a      	str	r2, [r3, #4]
					event_index++;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf8:	e019      	b.n	8000c2e <midi_getevents+0xc8>
				} else if (!n && o) {
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d116      	bne.n	8000c2e <midi_getevents+0xc8>
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d013      	beq.n	8000c2e <midi_getevents+0xc8>
					eventbuf[event_index].type = MIDI_NOTE_OFF;
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
					eventbuf[event_index].number = (i * 8) + (7 - j);
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	00d9      	lsls	r1, r3, #3
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	f1c3 0207 	rsb	r2, r3, #7
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	6838      	ldr	r0, [r7, #0]
 8000c22:	4403      	add	r3, r0
 8000c24:	440a      	add	r2, r1
 8000c26:	605a      	str	r2, [r3, #4]
					event_index++;
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
				}

				if (event_index == maxevents) {
 8000c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d101      	bne.n	8000c3a <midi_getevents+0xd4>
					return event_index;
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	e00d      	b.n	8000c56 <midi_getevents+0xf0>
			for (int j = 0; j < 8; j++) {
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	dda8      	ble.n	8000b98 <midi_getevents+0x32>
	for (int i = 0; i < chainlen; i++) {
 8000c46:	6a3b      	ldr	r3, [r7, #32]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	623b      	str	r3, [r7, #32]
 8000c4c:	6a3a      	ldr	r2, [r7, #32]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	db94      	blt.n	8000b7e <midi_getevents+0x18>
				}
			}
		}
	}
	return event_index;
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	372c      	adds	r7, #44	; 0x2c
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <scanchain_init>:
 *      Author: jake
 */
#include "scanchain.h"

int scanchain_init(const struct scanchain_pindef * pindef)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	/* Hold clear low and set all pins to idle state */
	HAL_GPIO_WritePin(pindef->clrn_port, pindef->clrn_pin, GPIO_PIN_RESET);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	899b      	ldrh	r3, [r3, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	f000 fe75 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pindef->pln_port, pindef->pln_pin, GPIO_PIN_SET);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6858      	ldr	r0, [r3, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	89db      	ldrh	r3, [r3, #14]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	f000 fe6d 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pindef->lat_port, pindef->lat_pin, GPIO_PIN_RESET);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6898      	ldr	r0, [r3, #8]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	8a1b      	ldrh	r3, [r3, #16]
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	f000 fe65 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pindef->clrn_port, pindef->clrn_pin, GPIO_PIN_SET);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	899b      	ldrh	r3, [r3, #12]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f000 fe5d 	bl	8001964 <HAL_GPIO_WritePin>

	return 0;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <scanchain_init_all>:

int scanchain_init_all(const struct scanchain_pindef pindefs[])
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; pindefs[i].clrn_port != NULL; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	e00d      	b.n	8000cde <scanchain_init_all+0x2a>
		scanchain_init(&pindefs[i]);
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ffc5 	bl	8000c62 <scanchain_init>
	for (i = 0; pindefs[i].clrn_port != NULL; i++) {
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1e6      	bne.n	8000cc2 <scanchain_init_all+0xe>
	}
	return i;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <scanchain_scan>:

int scanchain_scan(const struct scanchain_pindef * pindef, uint8_t * buf)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
	uint8_t dummybuf[1];

	/* Latch inputs */
	HAL_GPIO_WritePin(pindef->lat_port, pindef->lat_pin, GPIO_PIN_SET);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6898      	ldr	r0, [r3, #8]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	8a1b      	ldrh	r3, [r3, #16]
 8000d10:	2201      	movs	r2, #1
 8000d12:	4619      	mov	r1, r3
 8000d14:	f000 fe26 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f000 fb6d 	bl	80013f8 <HAL_Delay>
	HAL_GPIO_WritePin(pindef->lat_port, pindef->lat_pin, GPIO_PIN_RESET);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6898      	ldr	r0, [r3, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	8a1b      	ldrh	r3, [r3, #16]
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f000 fe1b 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f000 fb62 	bl	80013f8 <HAL_Delay>

	/* Parallel load */
	HAL_GPIO_WritePin(pindef->pln_port, pindef->pln_pin, GPIO_PIN_RESET);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6858      	ldr	r0, [r3, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	89db      	ldrh	r3, [r3, #14]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f000 fe10 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 fb57 	bl	80013f8 <HAL_Delay>
	/* Easiest way to clock the clk at least once while PLN is asserted */
	HAL_SPI_Receive(pindef->hspi, dummybuf, 1, 100);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6958      	ldr	r0, [r3, #20]
 8000d4e:	f107 010c 	add.w	r1, r7, #12
 8000d52:	2364      	movs	r3, #100	; 0x64
 8000d54:	2201      	movs	r2, #1
 8000d56:	f001 fafd 	bl	8002354 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(pindef->pln_port, pindef->pln_pin, GPIO_PIN_SET);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6858      	ldr	r0, [r3, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	89db      	ldrh	r3, [r3, #14]
 8000d62:	2201      	movs	r2, #1
 8000d64:	4619      	mov	r1, r3
 8000d66:	f000 fdfd 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 fb44 	bl	80013f8 <HAL_Delay>

	return HAL_SPI_Receive(pindef->hspi, buf, pindef->chain_length, 1000);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6958      	ldr	r0, [r3, #20]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	6839      	ldr	r1, [r7, #0]
 8000d80:	f001 fae8 	bl	8002354 <HAL_SPI_Receive>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000d96:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000d9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000da0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000ddc:	220a      	movs	r2, #10
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <MX_SPI1_Init+0x64>)
 8000de2:	f001 fa53 	bl	800228c <HAL_SPI_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dec:	f7ff feb4 	bl	8000b58 <Error_Handler>
  }

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200000f8 	.word	0x200000f8
 8000df8:	40013000 	.word	0x40013000

08000dfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a28      	ldr	r2, [pc, #160]	; (8000ebc <HAL_SPI_MspInit+0xc0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d149      	bne.n	8000eb2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e72:	2360      	movs	r3, #96	; 0x60
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e82:	2305      	movs	r3, #5
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <HAL_SPI_MspInit+0xc8>)
 8000e8e:	f000 fbe7 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e92:	2320      	movs	r3, #32
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <HAL_SPI_MspInit+0xcc>)
 8000eae:	f000 fbd7 	bl	8001660 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013000 	.word	0x40013000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_MspInit+0x4c>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f0a:	2007      	movs	r0, #7
 8000f0c:	f000 fb66 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40023800 	.word	0x40023800

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 fa22 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f80:	f000 fd0a 	bl	8001998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e00a      	b.n	8000fb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f9a:	f3af 8000 	nop.w
 8000f9e:	4601      	mov	r1, r0
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	60ba      	str	r2, [r7, #8]
 8000fa6:	b2ca      	uxtb	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf0      	blt.n	8000f9a <_read+0x12>
	}

return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e009      	b.n	8000fe8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fb6f 	bl	80006c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf1      	blt.n	8000fd4 <_write+0x12>
	}
	return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_close>:

int _close(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001022:	605a      	str	r2, [r3, #4]
	return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_isatty>:

int _isatty(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	return 1;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
	return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f002 f9c6 	bl	8003424 <__errno>
 8001098:	4602      	mov	r2, r0
 800109a:	230c      	movs	r3, #12
 800109c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20018000 	.word	0x20018000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	200000dc 	.word	0x200000dc
 80010cc:	200001d8 	.word	0x200001d8

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <SystemInit+0x28>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <SystemInit+0x28>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SystemInit+0x28>)
 80010e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ea:	609a      	str	r2, [r3, #8]
#endif
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_USART1_UART_Init+0x50>)
 8001104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001108:	f647 2212 	movw	r2, #31250	; 0x7a12
 800110c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_USART1_UART_Init+0x4c>)
 8001134:	f001 fcca 	bl	8002acc <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800113e:	f7ff fd0b 	bl	8000b58 <Error_Handler>
  }

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000150 	.word	0x20000150
 800114c:	40011000 	.word	0x40011000

08001150 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <MX_USART2_UART_Init+0x50>)
 8001158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_USART2_UART_Init+0x4c>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_USART2_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_USART2_UART_Init+0x4c>)
 8001188:	f001 fca0 	bl	8002acc <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001192:	f7ff fce1 	bl	8000b58 <Error_Handler>
  }

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000190 	.word	0x20000190
 80011a0:	40004400 	.word	0x40004400

080011a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a3b      	ldr	r2, [pc, #236]	; (80012b0 <HAL_UART_MspInit+0x10c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d13e      	bne.n	8001244 <HAL_UART_MspInit+0xa0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <HAL_UART_MspInit+0x110>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a39      	ldr	r2, [pc, #228]	; (80012b4 <HAL_UART_MspInit+0x110>)
 80011d0:	f043 0310 	orr.w	r3, r3, #16
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <HAL_UART_MspInit+0x110>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <HAL_UART_MspInit+0x110>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a32      	ldr	r2, [pc, #200]	; (80012b4 <HAL_UART_MspInit+0x110>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <HAL_UART_MspInit+0x110>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001204:	2312      	movs	r3, #18
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001210:	2307      	movs	r3, #7
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	4827      	ldr	r0, [pc, #156]	; (80012b8 <HAL_UART_MspInit+0x114>)
 800121c:	f000 fa20 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001232:	2307      	movs	r3, #7
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	481e      	ldr	r0, [pc, #120]	; (80012b8 <HAL_UART_MspInit+0x114>)
 800123e:	f000 fa0f 	bl	8001660 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001242:	e030      	b.n	80012a6 <HAL_UART_MspInit+0x102>
  else if(uartHandle->Instance==USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <HAL_UART_MspInit+0x118>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12b      	bne.n	80012a6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_UART_MspInit+0x110>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_UART_MspInit+0x110>)
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_UART_MspInit+0x110>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_UART_MspInit+0x110>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_UART_MspInit+0x110>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_UART_MspInit+0x110>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001286:	230c      	movs	r3, #12
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001296:	2307      	movs	r3, #7
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_UART_MspInit+0x114>)
 80012a2:	f000 f9dd 	bl	8001660 <HAL_GPIO_Init>
}
 80012a6:	bf00      	nop
 80012a8:	3730      	adds	r7, #48	; 0x30
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40011000 	.word	0x40011000
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40004400 	.word	0x40004400

080012c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012c6:	e003      	b.n	80012d0 <LoopCopyDataInit>

080012c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ce:	3104      	adds	r1, #4

080012d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012d8:	d3f6      	bcc.n	80012c8 <CopyDataInit>
  ldr  r2, =_sbss
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012dc:	e002      	b.n	80012e4 <LoopFillZerobss>

080012de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012e0:	f842 3b04 	str.w	r3, [r2], #4

080012e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012e8:	d3f9      	bcc.n	80012de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ea:	f7ff fef1 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f002 f89f 	bl	8003430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f2:	f7ff fa0f 	bl	8000714 <main>
  bx  lr    
 80012f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80012fc:	08004618 	.word	0x08004618
  ldr  r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001304:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8001308:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 800130c:	200001d8 	.word	0x200001d8

08001310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC_IRQHandler>
	...

08001314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_Init+0x40>)
 800131e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_Init+0x40>)
 800132a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_Init+0x40>)
 8001336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 f94d 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001342:	2000      	movs	r0, #0
 8001344:	f000 f808 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff fdc0 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023c00 	.word	0x40023c00

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f965 	bl	8001646 <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001394:	f000 f92d 	bl	80015f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000004c 	.word	0x2000004c
 80013b0:	20000054 	.word	0x20000054
 80013b4:	20000050 	.word	0x20000050

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000054 	.word	0x20000054
 80013dc:	200001d0 	.word	0x200001d0

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	200001d0 	.word	0x200001d0

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_Delay+0x40>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000054 	.word	0x20000054

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db0b      	blt.n	80014ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	4907      	ldr	r1, [pc, #28]	; (80014d8 <__NVIC_EnableIRQ+0x38>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff29 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001604:	f7ff ff3e 	bl	8001484 <__NVIC_GetPriorityGrouping>
 8001608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7ff ff8e 	bl	8001530 <NVIC_EncodePriority>
 8001614:	4602      	mov	r2, r0
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff5d 	bl	80014dc <__NVIC_SetPriority>
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff31 	bl	80014a0 <__NVIC_EnableIRQ>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffa2 	bl	8001598 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e159      	b.n	8001930 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 8148 	bne.w	800192a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d00b      	beq.n	80016ba <HAL_GPIO_Init+0x5a>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d007      	beq.n	80016ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ae:	2b11      	cmp	r3, #17
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b12      	cmp	r3, #18
 80016b8:	d130      	bne.n	800171c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f0:	2201      	movs	r2, #1
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 0201 	and.w	r2, r3, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0xfc>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b12      	cmp	r3, #18
 800175a:	d123      	bne.n	80017a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	08da      	lsrs	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3208      	adds	r2, #8
 800179e:	69b9      	ldr	r1, [r7, #24]
 80017a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0203 	and.w	r2, r3, #3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80a2 	beq.w	800192a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b56      	ldr	r3, [pc, #344]	; (8001944 <HAL_GPIO_Init+0x2e4>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a55      	ldr	r2, [pc, #340]	; (8001944 <HAL_GPIO_Init+0x2e4>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_GPIO_Init+0x2e4>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001802:	4a51      	ldr	r2, [pc, #324]	; (8001948 <HAL_GPIO_Init+0x2e8>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a48      	ldr	r2, [pc, #288]	; (800194c <HAL_GPIO_Init+0x2ec>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d019      	beq.n	8001862 <HAL_GPIO_Init+0x202>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a47      	ldr	r2, [pc, #284]	; (8001950 <HAL_GPIO_Init+0x2f0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0x1fe>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a46      	ldr	r2, [pc, #280]	; (8001954 <HAL_GPIO_Init+0x2f4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00d      	beq.n	800185a <HAL_GPIO_Init+0x1fa>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a45      	ldr	r2, [pc, #276]	; (8001958 <HAL_GPIO_Init+0x2f8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <HAL_GPIO_Init+0x1f6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a44      	ldr	r2, [pc, #272]	; (800195c <HAL_GPIO_Init+0x2fc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_GPIO_Init+0x1f2>
 800184e:	2304      	movs	r3, #4
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x204>
 8001852:	2307      	movs	r3, #7
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x204>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x204>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x204>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x204>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	4934      	ldr	r1, [pc, #208]	; (8001948 <HAL_GPIO_Init+0x2e8>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_GPIO_Init+0x300>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a6:	4a2e      	ldr	r2, [pc, #184]	; (8001960 <HAL_GPIO_Init+0x300>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <HAL_GPIO_Init+0x300>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d0:	4a23      	ldr	r2, [pc, #140]	; (8001960 <HAL_GPIO_Init+0x300>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_GPIO_Init+0x300>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fa:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_GPIO_Init+0x300>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_GPIO_Init+0x300>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_GPIO_Init+0x300>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f aea2 	bls.w	800167c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	3724      	adds	r7, #36	; 0x24
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40023800 	.word	0x40023800
 8001948:	40013800 	.word	0x40013800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400
 8001954:	40020800 	.word	0x40020800
 8001958:	40020c00 	.word	0x40020c00
 800195c:	40021000 	.word	0x40021000
 8001960:	40013c00 	.word	0x40013c00

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001980:	e003      	b.n	800198a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	041a      	lsls	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fe98 	bl	80006ec <HAL_GPIO_EXTI_Callback>
  }
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40013c00 	.word	0x40013c00

080019c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e25b      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d075      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019e6:	4ba3      	ldr	r3, [pc, #652]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d00c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f2:	4ba0      	ldr	r3, [pc, #640]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d112      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fe:	4b9d      	ldr	r3, [pc, #628]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a0a:	d10b      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	4b99      	ldr	r3, [pc, #612]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d05b      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x108>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d157      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e236      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x74>
 8001a2e:	4b91      	ldr	r3, [pc, #580]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a90      	ldr	r2, [pc, #576]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0xb0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x98>
 8001a46:	4b8b      	ldr	r3, [pc, #556]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a8a      	ldr	r2, [pc, #552]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a87      	ldr	r2, [pc, #540]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xb0>
 8001a60:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a83      	ldr	r2, [pc, #524]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b81      	ldr	r3, [pc, #516]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a80      	ldr	r2, [pc, #512]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fcae 	bl	80013e0 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff fcaa 	bl	80013e0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1fb      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0xc0>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fc9a 	bl	80013e0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fc96 	bl	80013e0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1e7      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xe8>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af6:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x152>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1bb      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4952      	ldr	r1, [pc, #328]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	4b4f      	ldr	r3, [pc, #316]	; (8001c78 <HAL_RCC_OscConfig+0x2b0>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fc4f 	bl	80013e0 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b46:	f7ff fc4b 	bl	80013e0 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e19c      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4940      	ldr	r1, [pc, #256]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_RCC_OscConfig+0x2b0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fc2e 	bl	80013e0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fc2a 	bl	80013e0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e17b      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d030      	beq.n	8001c14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_RCC_OscConfig+0x2b4>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fc0e 	bl	80013e0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fc0a 	bl	80013e0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e15b      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x200>
 8001be6:	e015      	b.n	8001c14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_OscConfig+0x2b4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fbf7 	bl	80013e0 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7ff fbf3 	bl	80013e0 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e144      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80a0 	beq.w	8001d62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_OscConfig+0x2b8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d121      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_RCC_OscConfig+0x2b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <HAL_RCC_OscConfig+0x2b8>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fbb9 	bl	80013e0 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	e011      	b.n	8001c96 <HAL_RCC_OscConfig+0x2ce>
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	42470000 	.word	0x42470000
 8001c7c:	42470e80 	.word	0x42470e80
 8001c80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c84:	f7ff fbac 	bl	80013e0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e0fd      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b81      	ldr	r3, [pc, #516]	; (8001e9c <HAL_RCC_OscConfig+0x4d4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d106      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x2f0>
 8001caa:	4b7d      	ldr	r3, [pc, #500]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	4a7c      	ldr	r2, [pc, #496]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb6:	e01c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x32a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0x312>
 8001cc0:	4b77      	ldr	r3, [pc, #476]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a76      	ldr	r2, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ccc:	4b74      	ldr	r3, [pc, #464]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a73      	ldr	r2, [pc, #460]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x32a>
 8001cda:	4b71      	ldr	r3, [pc, #452]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a70      	ldr	r2, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	4b6e      	ldr	r3, [pc, #440]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	4a6d      	ldr	r2, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d015      	beq.n	8001d26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fb71 	bl	80013e0 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff fb6d 	bl	80013e0 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0bc      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b61      	ldr	r3, [pc, #388]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ee      	beq.n	8001d02 <HAL_RCC_OscConfig+0x33a>
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fb5b 	bl	80013e0 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff fb57 	bl	80013e0 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0a6      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	4b56      	ldr	r3, [pc, #344]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	4b52      	ldr	r3, [pc, #328]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a51      	ldr	r2, [pc, #324]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8092 	beq.w	8001e90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d05c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d141      	bne.n	8001e04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <HAL_RCC_OscConfig+0x4dc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff fb2b 	bl	80013e0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff fb27 	bl	80013e0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e078      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69da      	ldr	r2, [r3, #28]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	019b      	lsls	r3, r3, #6
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	061b      	lsls	r3, r3, #24
 8001dd0:	4933      	ldr	r1, [pc, #204]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd6:	4b33      	ldr	r3, [pc, #204]	; (8001ea4 <HAL_RCC_OscConfig+0x4dc>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fb00 	bl	80013e0 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de4:	f7ff fafc 	bl	80013e0 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e04d      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x41c>
 8001e02:	e045      	b.n	8001e90 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <HAL_RCC_OscConfig+0x4dc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fae9 	bl	80013e0 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff fae5 	bl	80013e0 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e036      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x44a>
 8001e30:	e02e      	b.n	8001e90 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e029      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_RCC_OscConfig+0x4d8>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d11c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d115      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e66:	4013      	ands	r3, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d10d      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470060 	.word	0x42470060

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0cc      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d90c      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b65      	ldr	r3, [pc, #404]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0b8      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001efc:	4b59      	ldr	r3, [pc, #356]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4a58      	ldr	r2, [pc, #352]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a52      	ldr	r2, [pc, #328]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b50      	ldr	r3, [pc, #320]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	494d      	ldr	r1, [pc, #308]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d044      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d119      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e07f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e06f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e067      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4934      	ldr	r1, [pc, #208]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f98:	f7ff fa22 	bl	80013e0 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7ff fa1e 	bl	80013e0 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e04f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d20c      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e032      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4916      	ldr	r1, [pc, #88]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	490e      	ldr	r1, [pc, #56]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800202e:	f000 f821 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002032:	4601      	mov	r1, r0
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	fa21 f303 	lsr.w	r3, r1, r3
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f982 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00
 8002064:	40023800 	.word	0x40023800
 8002068:	08004558 	.word	0x08004558
 800206c:	2000004c 	.word	0x2000004c
 8002070:	20000050 	.word	0x20000050

08002074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	2300      	movs	r3, #0
 8002084:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d007      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x32>
 8002096:	2b08      	cmp	r3, #8
 8002098:	d008      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x38>
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 80b4 	bne.w	8002208 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b5e      	ldr	r3, [pc, #376]	; (800221c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020a2:	60bb      	str	r3, [r7, #8]
       break;
 80020a4:	e0b3      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020a6:	4b5e      	ldr	r3, [pc, #376]	; (8002220 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80020a8:	60bb      	str	r3, [r7, #8]
      break;
 80020aa:	e0b0      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ac:	4b5a      	ldr	r3, [pc, #360]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b6:	4b58      	ldr	r3, [pc, #352]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d04a      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c2:	4b55      	ldr	r3, [pc, #340]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	f04f 0400 	mov.w	r4, #0
 80020cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	ea03 0501 	and.w	r5, r3, r1
 80020d8:	ea04 0602 	and.w	r6, r4, r2
 80020dc:	4629      	mov	r1, r5
 80020de:	4632      	mov	r2, r6
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	f04f 0400 	mov.w	r4, #0
 80020e8:	0154      	lsls	r4, r2, #5
 80020ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020ee:	014b      	lsls	r3, r1, #5
 80020f0:	4619      	mov	r1, r3
 80020f2:	4622      	mov	r2, r4
 80020f4:	1b49      	subs	r1, r1, r5
 80020f6:	eb62 0206 	sbc.w	r2, r2, r6
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	f04f 0400 	mov.w	r4, #0
 8002102:	0194      	lsls	r4, r2, #6
 8002104:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002108:	018b      	lsls	r3, r1, #6
 800210a:	1a5b      	subs	r3, r3, r1
 800210c:	eb64 0402 	sbc.w	r4, r4, r2
 8002110:	f04f 0100 	mov.w	r1, #0
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	00e2      	lsls	r2, r4, #3
 800211a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800211e:	00d9      	lsls	r1, r3, #3
 8002120:	460b      	mov	r3, r1
 8002122:	4614      	mov	r4, r2
 8002124:	195b      	adds	r3, r3, r5
 8002126:	eb44 0406 	adc.w	r4, r4, r6
 800212a:	f04f 0100 	mov.w	r1, #0
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	0262      	lsls	r2, r4, #9
 8002134:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002138:	0259      	lsls	r1, r3, #9
 800213a:	460b      	mov	r3, r1
 800213c:	4614      	mov	r4, r2
 800213e:	4618      	mov	r0, r3
 8002140:	4621      	mov	r1, r4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f04f 0400 	mov.w	r4, #0
 8002148:	461a      	mov	r2, r3
 800214a:	4623      	mov	r3, r4
 800214c:	f7fe f898 	bl	8000280 <__aeabi_uldivmod>
 8002150:	4603      	mov	r3, r0
 8002152:	460c      	mov	r4, r1
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e049      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	099b      	lsrs	r3, r3, #6
 800215e:	f04f 0400 	mov.w	r4, #0
 8002162:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	ea03 0501 	and.w	r5, r3, r1
 800216e:	ea04 0602 	and.w	r6, r4, r2
 8002172:	4629      	mov	r1, r5
 8002174:	4632      	mov	r2, r6
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f04f 0400 	mov.w	r4, #0
 800217e:	0154      	lsls	r4, r2, #5
 8002180:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002184:	014b      	lsls	r3, r1, #5
 8002186:	4619      	mov	r1, r3
 8002188:	4622      	mov	r2, r4
 800218a:	1b49      	subs	r1, r1, r5
 800218c:	eb62 0206 	sbc.w	r2, r2, r6
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	f04f 0400 	mov.w	r4, #0
 8002198:	0194      	lsls	r4, r2, #6
 800219a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800219e:	018b      	lsls	r3, r1, #6
 80021a0:	1a5b      	subs	r3, r3, r1
 80021a2:	eb64 0402 	sbc.w	r4, r4, r2
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	00e2      	lsls	r2, r4, #3
 80021b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021b4:	00d9      	lsls	r1, r3, #3
 80021b6:	460b      	mov	r3, r1
 80021b8:	4614      	mov	r4, r2
 80021ba:	195b      	adds	r3, r3, r5
 80021bc:	eb44 0406 	adc.w	r4, r4, r6
 80021c0:	f04f 0100 	mov.w	r1, #0
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	02a2      	lsls	r2, r4, #10
 80021ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021ce:	0299      	lsls	r1, r3, #10
 80021d0:	460b      	mov	r3, r1
 80021d2:	4614      	mov	r4, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	4621      	mov	r1, r4
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f04f 0400 	mov.w	r4, #0
 80021de:	461a      	mov	r2, r3
 80021e0:	4623      	mov	r3, r4
 80021e2:	f7fe f84d 	bl	8000280 <__aeabi_uldivmod>
 80021e6:	4603      	mov	r3, r0
 80021e8:	460c      	mov	r4, r1
 80021ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	3301      	adds	r3, #1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	60bb      	str	r3, [r7, #8]
      break;
 8002206:	e002      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800220a:	60bb      	str	r3, [r7, #8]
      break;
 800220c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220e:	68bb      	ldr	r3, [r7, #8]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	00f42400 	.word	0x00f42400
 8002220:	007a1200 	.word	0x007a1200

08002224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	2000004c 	.word	0x2000004c

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002240:	f7ff fff0 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002244:	4601      	mov	r1, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a9b      	lsrs	r3, r3, #10
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4a03      	ldr	r2, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	08004568 	.word	0x08004568

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002268:	f7ff ffdc 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 800226c:	4601      	mov	r1, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0b5b      	lsrs	r3, r3, #13
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4a03      	ldr	r2, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	08004568 	.word	0x08004568

0800228c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e056      	b.n	800234c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d106      	bne.n	80022be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe fd9f 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2202      	movs	r2, #2
 80022c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	ea42 0103 	orr.w	r1, r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	f003 0104 	and.w	r1, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	4613      	mov	r3, r2
 8002362:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002370:	d112      	bne.n	8002398 <HAL_SPI_Receive+0x44>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10e      	bne.n	8002398 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2204      	movs	r2, #4
 800237e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f8e9 	bl	8002566 <HAL_SPI_TransmitReceive>
 8002394:	4603      	mov	r3, r0
 8002396:	e0e2      	b.n	800255e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_SPI_Receive+0x52>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0db      	b.n	800255e <HAL_SPI_Receive+0x20a>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ae:	f7ff f817 	bl	80013e0 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d002      	beq.n	80023c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
 80023c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023c4:	e0c2      	b.n	800254c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_SPI_Receive+0x7e>
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023d6:	e0b9      	b.n	800254c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2204      	movs	r2, #4
 80023dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800241e:	d107      	bne.n	8002430 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800242e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d007      	beq.n	800244e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d162      	bne.n	800251c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002456:	e02e      	b.n	80024b6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d115      	bne.n	8002492 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f103 020c 	add.w	r2, r3, #12
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002490:	e011      	b.n	80024b6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002492:	f7fe ffa5 	bl	80013e0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d803      	bhi.n	80024aa <HAL_SPI_Receive+0x156>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024a8:	d102      	bne.n	80024b0 <HAL_SPI_Receive+0x15c>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024b4:	e04a      	b.n	800254c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1cb      	bne.n	8002458 <HAL_SPI_Receive+0x104>
 80024c0:	e031      	b.n	8002526 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d113      	bne.n	80024f8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	b292      	uxth	r2, r2
 80024dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	1c9a      	adds	r2, r3, #2
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024f6:	e011      	b.n	800251c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f8:	f7fe ff72 	bl	80013e0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d803      	bhi.n	8002510 <HAL_SPI_Receive+0x1bc>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800250e:	d102      	bne.n	8002516 <HAL_SPI_Receive+0x1c2>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	75fb      	strb	r3, [r7, #23]
          goto error;
 800251a:	e017      	b.n	800254c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1cd      	bne.n	80024c2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fa27 	bl	800297e <SPI_EndRxTransaction>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	75fb      	strb	r3, [r7, #23]
 8002548:	e000      	b.n	800254c <HAL_SPI_Receive+0x1f8>
  }

error :
 800254a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800255c:	7dfb      	ldrb	r3, [r7, #23]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b08c      	sub	sp, #48	; 0x30
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002574:	2301      	movs	r3, #1
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_SPI_TransmitReceive+0x26>
 8002588:	2302      	movs	r3, #2
 800258a:	e18a      	b.n	80028a2 <HAL_SPI_TransmitReceive+0x33c>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002594:	f7fe ff24 	bl	80013e0 <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d00f      	beq.n	80025d6 <HAL_SPI_TransmitReceive+0x70>
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025bc:	d107      	bne.n	80025ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_SPI_TransmitReceive+0x68>
 80025c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d003      	beq.n	80025d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025d4:	e15b      	b.n	800288e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_SPI_TransmitReceive+0x82>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_SPI_TransmitReceive+0x82>
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d103      	bne.n	80025f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025ee:	e14e      	b.n	800288e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d003      	beq.n	8002604 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2205      	movs	r2, #5
 8002600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	887a      	ldrh	r2, [r7, #2]
 8002626:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d007      	beq.n	8002658 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002656:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002660:	d178      	bne.n	8002754 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_SPI_TransmitReceive+0x10a>
 800266a:	8b7b      	ldrh	r3, [r7, #26]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d166      	bne.n	800273e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	881a      	ldrh	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	1c9a      	adds	r2, r3, #2
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002694:	e053      	b.n	800273e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d11b      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x176>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_SPI_TransmitReceive+0x176>
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d113      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	1c9a      	adds	r2, r3, #2
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d119      	bne.n	800271e <HAL_SPI_TransmitReceive+0x1b8>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d014      	beq.n	800271e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	b292      	uxth	r2, r2
 8002700:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	1c9a      	adds	r2, r3, #2
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800271a:	2301      	movs	r3, #1
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800271e:	f7fe fe5f 	bl	80013e0 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800272a:	429a      	cmp	r2, r3
 800272c:	d807      	bhi.n	800273e <HAL_SPI_TransmitReceive+0x1d8>
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002734:	d003      	beq.n	800273e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800273c:	e0a7      	b.n	800288e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1a6      	bne.n	8002696 <HAL_SPI_TransmitReceive+0x130>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1a1      	bne.n	8002696 <HAL_SPI_TransmitReceive+0x130>
 8002752:	e07c      	b.n	800284e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_SPI_TransmitReceive+0x1fc>
 800275c:	8b7b      	ldrh	r3, [r7, #26]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d16b      	bne.n	800283a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	7812      	ldrb	r2, [r2, #0]
 800276e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002788:	e057      	b.n	800283a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	d11c      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x26c>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d017      	beq.n	80027d2 <HAL_SPI_TransmitReceive+0x26c>
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d114      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	7812      	ldrb	r2, [r2, #0]
 80027b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d119      	bne.n	8002814 <HAL_SPI_TransmitReceive+0x2ae>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d014      	beq.n	8002814 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002810:	2301      	movs	r3, #1
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002814:	f7fe fde4 	bl	80013e0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002820:	429a      	cmp	r2, r3
 8002822:	d803      	bhi.n	800282c <HAL_SPI_TransmitReceive+0x2c6>
 8002824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800282a:	d102      	bne.n	8002832 <HAL_SPI_TransmitReceive+0x2cc>
 800282c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282e:	2b00      	cmp	r3, #0
 8002830:	d103      	bne.n	800283a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002838:	e029      	b.n	800288e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1a2      	bne.n	800278a <HAL_SPI_TransmitReceive+0x224>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d19d      	bne.n	800278a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f8f8 	bl	8002a48 <SPI_EndRxTxTransaction>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d006      	beq.n	800286c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800286a:	e010      	b.n	800288e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	e000      	b.n	800288e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800288c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800289e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3730      	adds	r7, #48	; 0x30
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	4613      	mov	r3, r2
 80028b8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ba:	e04c      	b.n	8002956 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c2:	d048      	beq.n	8002956 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028c4:	f7fe fd8c 	bl	80013e0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d902      	bls.n	80028da <SPI_WaitFlagStateUntilTimeout+0x30>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d13d      	bne.n	8002956 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028f2:	d111      	bne.n	8002918 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028fc:	d004      	beq.n	8002908 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002906:	d107      	bne.n	8002918 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002916:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002920:	d10f      	bne.n	8002942 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002940:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e00f      	b.n	8002976 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4013      	ands	r3, r2
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	429a      	cmp	r2, r3
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	429a      	cmp	r2, r3
 8002972:	d1a3      	bne.n	80028bc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af02      	add	r7, sp, #8
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002992:	d111      	bne.n	80029b8 <SPI_EndRxTransaction+0x3a>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299c:	d004      	beq.n	80029a8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	d107      	bne.n	80029b8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c0:	d12a      	bne.n	8002a18 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d012      	beq.n	80029f2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff ff67 	bl	80028aa <SPI_WaitFlagStateUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d02d      	beq.n	8002a3e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e026      	b.n	8002a40 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2101      	movs	r1, #1
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7ff ff54 	bl	80028aa <SPI_WaitFlagStateUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01a      	beq.n	8002a3e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e013      	b.n	8002a40 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2101      	movs	r1, #1
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f7ff ff41 	bl	80028aa <SPI_WaitFlagStateUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e000      	b.n	8002a40 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <SPI_EndRxTxTransaction+0x7c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <SPI_EndRxTxTransaction+0x80>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0d5b      	lsrs	r3, r3, #21
 8002a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a72:	d112      	bne.n	8002a9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff ff13 	bl	80028aa <SPI_WaitFlagStateUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e00f      	b.n	8002aba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d0f2      	beq.n	8002a9a <SPI_EndRxTxTransaction+0x52>
 8002ab4:	e000      	b.n	8002ab8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ab6:	bf00      	nop
  }

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	2000004c 	.word	0x2000004c
 8002ac8:	165e9f81 	.word	0x165e9f81

08002acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e03f      	b.n	8002b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe fb56 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f90b 	bl	8002d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b088      	sub	sp, #32
 8002b6a:	af02      	add	r7, sp, #8
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	f040 8083 	bne.w	8002c8e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_UART_Transmit+0x2e>
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e07b      	b.n	8002c90 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Transmit+0x40>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e074      	b.n	8002c90 <HAL_UART_Transmit+0x12a>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2221      	movs	r2, #33	; 0x21
 8002bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fc10 	bl	80013e0 <HAL_GetTick>
 8002bc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	88fa      	ldrh	r2, [r7, #6]
 8002bc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	88fa      	ldrh	r2, [r7, #6]
 8002bcc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002bd6:	e042      	b.n	8002c5e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bee:	d122      	bne.n	8002c36 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f84c 	bl	8002c98 <UART_WaitOnFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e042      	b.n	8002c90 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c1c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3302      	adds	r3, #2
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	e017      	b.n	8002c5e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3301      	adds	r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	e013      	b.n	8002c5e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f829 	bl	8002c98 <UART_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e01f      	b.n	8002c90 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	60ba      	str	r2, [r7, #8]
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1b7      	bne.n	8002bd8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f810 	bl	8002c98 <UART_WaitOnFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e006      	b.n	8002c90 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
  }
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca8:	e02c      	b.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb0:	d028      	beq.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cb8:	f7fe fb92 	bl	80013e0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d21d      	bcs.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cd6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e00f      	b.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d0c3      	beq.n	8002caa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d6e:	f023 030c 	bic.w	r3, r3, #12
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9a:	f040 818b 	bne.w	80030b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4ac1      	ldr	r2, [pc, #772]	; (80030a8 <UART_SetConfig+0x37c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d005      	beq.n	8002db4 <UART_SetConfig+0x88>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4abf      	ldr	r2, [pc, #764]	; (80030ac <UART_SetConfig+0x380>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	f040 80bd 	bne.w	8002f2e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002db4:	f7ff fa56 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8002db8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	461d      	mov	r5, r3
 8002dbe:	f04f 0600 	mov.w	r6, #0
 8002dc2:	46a8      	mov	r8, r5
 8002dc4:	46b1      	mov	r9, r6
 8002dc6:	eb18 0308 	adds.w	r3, r8, r8
 8002dca:	eb49 0409 	adc.w	r4, r9, r9
 8002dce:	4698      	mov	r8, r3
 8002dd0:	46a1      	mov	r9, r4
 8002dd2:	eb18 0805 	adds.w	r8, r8, r5
 8002dd6:	eb49 0906 	adc.w	r9, r9, r6
 8002dda:	f04f 0100 	mov.w	r1, #0
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002de6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002dea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002dee:	4688      	mov	r8, r1
 8002df0:	4691      	mov	r9, r2
 8002df2:	eb18 0005 	adds.w	r0, r8, r5
 8002df6:	eb49 0106 	adc.w	r1, r9, r6
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	461d      	mov	r5, r3
 8002e00:	f04f 0600 	mov.w	r6, #0
 8002e04:	196b      	adds	r3, r5, r5
 8002e06:	eb46 0406 	adc.w	r4, r6, r6
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4623      	mov	r3, r4
 8002e0e:	f7fd fa37 	bl	8000280 <__aeabi_uldivmod>
 8002e12:	4603      	mov	r3, r0
 8002e14:	460c      	mov	r4, r1
 8002e16:	461a      	mov	r2, r3
 8002e18:	4ba5      	ldr	r3, [pc, #660]	; (80030b0 <UART_SetConfig+0x384>)
 8002e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	461d      	mov	r5, r3
 8002e28:	f04f 0600 	mov.w	r6, #0
 8002e2c:	46a9      	mov	r9, r5
 8002e2e:	46b2      	mov	sl, r6
 8002e30:	eb19 0309 	adds.w	r3, r9, r9
 8002e34:	eb4a 040a 	adc.w	r4, sl, sl
 8002e38:	4699      	mov	r9, r3
 8002e3a:	46a2      	mov	sl, r4
 8002e3c:	eb19 0905 	adds.w	r9, r9, r5
 8002e40:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e58:	4689      	mov	r9, r1
 8002e5a:	4692      	mov	sl, r2
 8002e5c:	eb19 0005 	adds.w	r0, r9, r5
 8002e60:	eb4a 0106 	adc.w	r1, sl, r6
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	461d      	mov	r5, r3
 8002e6a:	f04f 0600 	mov.w	r6, #0
 8002e6e:	196b      	adds	r3, r5, r5
 8002e70:	eb46 0406 	adc.w	r4, r6, r6
 8002e74:	461a      	mov	r2, r3
 8002e76:	4623      	mov	r3, r4
 8002e78:	f7fd fa02 	bl	8000280 <__aeabi_uldivmod>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b8b      	ldr	r3, [pc, #556]	; (80030b0 <UART_SetConfig+0x384>)
 8002e84:	fba3 1302 	umull	r1, r3, r3, r2
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	2164      	movs	r1, #100	; 0x64
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	3332      	adds	r3, #50	; 0x32
 8002e96:	4a86      	ldr	r2, [pc, #536]	; (80030b0 <UART_SetConfig+0x384>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ea4:	4498      	add	r8, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	461d      	mov	r5, r3
 8002eaa:	f04f 0600 	mov.w	r6, #0
 8002eae:	46a9      	mov	r9, r5
 8002eb0:	46b2      	mov	sl, r6
 8002eb2:	eb19 0309 	adds.w	r3, r9, r9
 8002eb6:	eb4a 040a 	adc.w	r4, sl, sl
 8002eba:	4699      	mov	r9, r3
 8002ebc:	46a2      	mov	sl, r4
 8002ebe:	eb19 0905 	adds.w	r9, r9, r5
 8002ec2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ec6:	f04f 0100 	mov.w	r1, #0
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ed2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ed6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eda:	4689      	mov	r9, r1
 8002edc:	4692      	mov	sl, r2
 8002ede:	eb19 0005 	adds.w	r0, r9, r5
 8002ee2:	eb4a 0106 	adc.w	r1, sl, r6
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	461d      	mov	r5, r3
 8002eec:	f04f 0600 	mov.w	r6, #0
 8002ef0:	196b      	adds	r3, r5, r5
 8002ef2:	eb46 0406 	adc.w	r4, r6, r6
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4623      	mov	r3, r4
 8002efa:	f7fd f9c1 	bl	8000280 <__aeabi_uldivmod>
 8002efe:	4603      	mov	r3, r0
 8002f00:	460c      	mov	r4, r1
 8002f02:	461a      	mov	r2, r3
 8002f04:	4b6a      	ldr	r3, [pc, #424]	; (80030b0 <UART_SetConfig+0x384>)
 8002f06:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2164      	movs	r1, #100	; 0x64
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	3332      	adds	r3, #50	; 0x32
 8002f18:	4a65      	ldr	r2, [pc, #404]	; (80030b0 <UART_SetConfig+0x384>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	f003 0207 	and.w	r2, r3, #7
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4442      	add	r2, r8
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	e26f      	b.n	800340e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f2e:	f7ff f985 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8002f32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	461d      	mov	r5, r3
 8002f38:	f04f 0600 	mov.w	r6, #0
 8002f3c:	46a8      	mov	r8, r5
 8002f3e:	46b1      	mov	r9, r6
 8002f40:	eb18 0308 	adds.w	r3, r8, r8
 8002f44:	eb49 0409 	adc.w	r4, r9, r9
 8002f48:	4698      	mov	r8, r3
 8002f4a:	46a1      	mov	r9, r4
 8002f4c:	eb18 0805 	adds.w	r8, r8, r5
 8002f50:	eb49 0906 	adc.w	r9, r9, r6
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f68:	4688      	mov	r8, r1
 8002f6a:	4691      	mov	r9, r2
 8002f6c:	eb18 0005 	adds.w	r0, r8, r5
 8002f70:	eb49 0106 	adc.w	r1, r9, r6
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	461d      	mov	r5, r3
 8002f7a:	f04f 0600 	mov.w	r6, #0
 8002f7e:	196b      	adds	r3, r5, r5
 8002f80:	eb46 0406 	adc.w	r4, r6, r6
 8002f84:	461a      	mov	r2, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	f7fd f97a 	bl	8000280 <__aeabi_uldivmod>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	460c      	mov	r4, r1
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <UART_SetConfig+0x384>)
 8002f94:	fba3 2302 	umull	r2, r3, r3, r2
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	461d      	mov	r5, r3
 8002fa2:	f04f 0600 	mov.w	r6, #0
 8002fa6:	46a9      	mov	r9, r5
 8002fa8:	46b2      	mov	sl, r6
 8002faa:	eb19 0309 	adds.w	r3, r9, r9
 8002fae:	eb4a 040a 	adc.w	r4, sl, sl
 8002fb2:	4699      	mov	r9, r3
 8002fb4:	46a2      	mov	sl, r4
 8002fb6:	eb19 0905 	adds.w	r9, r9, r5
 8002fba:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fd2:	4689      	mov	r9, r1
 8002fd4:	4692      	mov	sl, r2
 8002fd6:	eb19 0005 	adds.w	r0, r9, r5
 8002fda:	eb4a 0106 	adc.w	r1, sl, r6
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	461d      	mov	r5, r3
 8002fe4:	f04f 0600 	mov.w	r6, #0
 8002fe8:	196b      	adds	r3, r5, r5
 8002fea:	eb46 0406 	adc.w	r4, r6, r6
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4623      	mov	r3, r4
 8002ff2:	f7fd f945 	bl	8000280 <__aeabi_uldivmod>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <UART_SetConfig+0x384>)
 8002ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2164      	movs	r1, #100	; 0x64
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	3332      	adds	r3, #50	; 0x32
 8003010:	4a27      	ldr	r2, [pc, #156]	; (80030b0 <UART_SetConfig+0x384>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800301e:	4498      	add	r8, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	461d      	mov	r5, r3
 8003024:	f04f 0600 	mov.w	r6, #0
 8003028:	46a9      	mov	r9, r5
 800302a:	46b2      	mov	sl, r6
 800302c:	eb19 0309 	adds.w	r3, r9, r9
 8003030:	eb4a 040a 	adc.w	r4, sl, sl
 8003034:	4699      	mov	r9, r3
 8003036:	46a2      	mov	sl, r4
 8003038:	eb19 0905 	adds.w	r9, r9, r5
 800303c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003040:	f04f 0100 	mov.w	r1, #0
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800304c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003050:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003054:	4689      	mov	r9, r1
 8003056:	4692      	mov	sl, r2
 8003058:	eb19 0005 	adds.w	r0, r9, r5
 800305c:	eb4a 0106 	adc.w	r1, sl, r6
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	461d      	mov	r5, r3
 8003066:	f04f 0600 	mov.w	r6, #0
 800306a:	196b      	adds	r3, r5, r5
 800306c:	eb46 0406 	adc.w	r4, r6, r6
 8003070:	461a      	mov	r2, r3
 8003072:	4623      	mov	r3, r4
 8003074:	f7fd f904 	bl	8000280 <__aeabi_uldivmod>
 8003078:	4603      	mov	r3, r0
 800307a:	460c      	mov	r4, r1
 800307c:	461a      	mov	r2, r3
 800307e:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <UART_SetConfig+0x384>)
 8003080:	fba3 1302 	umull	r1, r3, r3, r2
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	2164      	movs	r1, #100	; 0x64
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	3332      	adds	r3, #50	; 0x32
 8003092:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <UART_SetConfig+0x384>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	f003 0207 	and.w	r2, r3, #7
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4442      	add	r2, r8
 80030a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80030a6:	e1b2      	b.n	800340e <UART_SetConfig+0x6e2>
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40011400 	.word	0x40011400
 80030b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4ad7      	ldr	r2, [pc, #860]	; (8003418 <UART_SetConfig+0x6ec>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d005      	beq.n	80030ca <UART_SetConfig+0x39e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4ad6      	ldr	r2, [pc, #856]	; (800341c <UART_SetConfig+0x6f0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	f040 80d1 	bne.w	800326c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80030ca:	f7ff f8cb 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 80030ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	469a      	mov	sl, r3
 80030d4:	f04f 0b00 	mov.w	fp, #0
 80030d8:	46d0      	mov	r8, sl
 80030da:	46d9      	mov	r9, fp
 80030dc:	eb18 0308 	adds.w	r3, r8, r8
 80030e0:	eb49 0409 	adc.w	r4, r9, r9
 80030e4:	4698      	mov	r8, r3
 80030e6:	46a1      	mov	r9, r4
 80030e8:	eb18 080a 	adds.w	r8, r8, sl
 80030ec:	eb49 090b 	adc.w	r9, r9, fp
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003100:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003104:	4688      	mov	r8, r1
 8003106:	4691      	mov	r9, r2
 8003108:	eb1a 0508 	adds.w	r5, sl, r8
 800310c:	eb4b 0609 	adc.w	r6, fp, r9
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4619      	mov	r1, r3
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	f04f 0400 	mov.w	r4, #0
 8003122:	0094      	lsls	r4, r2, #2
 8003124:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003128:	008b      	lsls	r3, r1, #2
 800312a:	461a      	mov	r2, r3
 800312c:	4623      	mov	r3, r4
 800312e:	4628      	mov	r0, r5
 8003130:	4631      	mov	r1, r6
 8003132:	f7fd f8a5 	bl	8000280 <__aeabi_uldivmod>
 8003136:	4603      	mov	r3, r0
 8003138:	460c      	mov	r4, r1
 800313a:	461a      	mov	r2, r3
 800313c:	4bb8      	ldr	r3, [pc, #736]	; (8003420 <UART_SetConfig+0x6f4>)
 800313e:	fba3 2302 	umull	r2, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	469b      	mov	fp, r3
 800314c:	f04f 0c00 	mov.w	ip, #0
 8003150:	46d9      	mov	r9, fp
 8003152:	46e2      	mov	sl, ip
 8003154:	eb19 0309 	adds.w	r3, r9, r9
 8003158:	eb4a 040a 	adc.w	r4, sl, sl
 800315c:	4699      	mov	r9, r3
 800315e:	46a2      	mov	sl, r4
 8003160:	eb19 090b 	adds.w	r9, r9, fp
 8003164:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003168:	f04f 0100 	mov.w	r1, #0
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003174:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003178:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800317c:	4689      	mov	r9, r1
 800317e:	4692      	mov	sl, r2
 8003180:	eb1b 0509 	adds.w	r5, fp, r9
 8003184:	eb4c 060a 	adc.w	r6, ip, sl
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4619      	mov	r1, r3
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	f04f 0400 	mov.w	r4, #0
 800319a:	0094      	lsls	r4, r2, #2
 800319c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031a0:	008b      	lsls	r3, r1, #2
 80031a2:	461a      	mov	r2, r3
 80031a4:	4623      	mov	r3, r4
 80031a6:	4628      	mov	r0, r5
 80031a8:	4631      	mov	r1, r6
 80031aa:	f7fd f869 	bl	8000280 <__aeabi_uldivmod>
 80031ae:	4603      	mov	r3, r0
 80031b0:	460c      	mov	r4, r1
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b9a      	ldr	r3, [pc, #616]	; (8003420 <UART_SetConfig+0x6f4>)
 80031b6:	fba3 1302 	umull	r1, r3, r3, r2
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2164      	movs	r1, #100	; 0x64
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	3332      	adds	r3, #50	; 0x32
 80031c8:	4a95      	ldr	r2, [pc, #596]	; (8003420 <UART_SetConfig+0x6f4>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d4:	4498      	add	r8, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	469b      	mov	fp, r3
 80031da:	f04f 0c00 	mov.w	ip, #0
 80031de:	46d9      	mov	r9, fp
 80031e0:	46e2      	mov	sl, ip
 80031e2:	eb19 0309 	adds.w	r3, r9, r9
 80031e6:	eb4a 040a 	adc.w	r4, sl, sl
 80031ea:	4699      	mov	r9, r3
 80031ec:	46a2      	mov	sl, r4
 80031ee:	eb19 090b 	adds.w	r9, r9, fp
 80031f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003202:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003206:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800320a:	4689      	mov	r9, r1
 800320c:	4692      	mov	sl, r2
 800320e:	eb1b 0509 	adds.w	r5, fp, r9
 8003212:	eb4c 060a 	adc.w	r6, ip, sl
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4619      	mov	r1, r3
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	f04f 0400 	mov.w	r4, #0
 8003228:	0094      	lsls	r4, r2, #2
 800322a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800322e:	008b      	lsls	r3, r1, #2
 8003230:	461a      	mov	r2, r3
 8003232:	4623      	mov	r3, r4
 8003234:	4628      	mov	r0, r5
 8003236:	4631      	mov	r1, r6
 8003238:	f7fd f822 	bl	8000280 <__aeabi_uldivmod>
 800323c:	4603      	mov	r3, r0
 800323e:	460c      	mov	r4, r1
 8003240:	461a      	mov	r2, r3
 8003242:	4b77      	ldr	r3, [pc, #476]	; (8003420 <UART_SetConfig+0x6f4>)
 8003244:	fba3 1302 	umull	r1, r3, r3, r2
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	2164      	movs	r1, #100	; 0x64
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	3332      	adds	r3, #50	; 0x32
 8003256:	4a72      	ldr	r2, [pc, #456]	; (8003420 <UART_SetConfig+0x6f4>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	f003 020f 	and.w	r2, r3, #15
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4442      	add	r2, r8
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	e0d0      	b.n	800340e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800326c:	f7fe ffe6 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003270:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	469a      	mov	sl, r3
 8003276:	f04f 0b00 	mov.w	fp, #0
 800327a:	46d0      	mov	r8, sl
 800327c:	46d9      	mov	r9, fp
 800327e:	eb18 0308 	adds.w	r3, r8, r8
 8003282:	eb49 0409 	adc.w	r4, r9, r9
 8003286:	4698      	mov	r8, r3
 8003288:	46a1      	mov	r9, r4
 800328a:	eb18 080a 	adds.w	r8, r8, sl
 800328e:	eb49 090b 	adc.w	r9, r9, fp
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800329e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032a6:	4688      	mov	r8, r1
 80032a8:	4691      	mov	r9, r2
 80032aa:	eb1a 0508 	adds.w	r5, sl, r8
 80032ae:	eb4b 0609 	adc.w	r6, fp, r9
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4619      	mov	r1, r3
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	f04f 0400 	mov.w	r4, #0
 80032c4:	0094      	lsls	r4, r2, #2
 80032c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032ca:	008b      	lsls	r3, r1, #2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4623      	mov	r3, r4
 80032d0:	4628      	mov	r0, r5
 80032d2:	4631      	mov	r1, r6
 80032d4:	f7fc ffd4 	bl	8000280 <__aeabi_uldivmod>
 80032d8:	4603      	mov	r3, r0
 80032da:	460c      	mov	r4, r1
 80032dc:	461a      	mov	r2, r3
 80032de:	4b50      	ldr	r3, [pc, #320]	; (8003420 <UART_SetConfig+0x6f4>)
 80032e0:	fba3 2302 	umull	r2, r3, r3, r2
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	469b      	mov	fp, r3
 80032ee:	f04f 0c00 	mov.w	ip, #0
 80032f2:	46d9      	mov	r9, fp
 80032f4:	46e2      	mov	sl, ip
 80032f6:	eb19 0309 	adds.w	r3, r9, r9
 80032fa:	eb4a 040a 	adc.w	r4, sl, sl
 80032fe:	4699      	mov	r9, r3
 8003300:	46a2      	mov	sl, r4
 8003302:	eb19 090b 	adds.w	r9, r9, fp
 8003306:	eb4a 0a0c 	adc.w	sl, sl, ip
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003316:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800331a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800331e:	4689      	mov	r9, r1
 8003320:	4692      	mov	sl, r2
 8003322:	eb1b 0509 	adds.w	r5, fp, r9
 8003326:	eb4c 060a 	adc.w	r6, ip, sl
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4619      	mov	r1, r3
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	f04f 0400 	mov.w	r4, #0
 800333c:	0094      	lsls	r4, r2, #2
 800333e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003342:	008b      	lsls	r3, r1, #2
 8003344:	461a      	mov	r2, r3
 8003346:	4623      	mov	r3, r4
 8003348:	4628      	mov	r0, r5
 800334a:	4631      	mov	r1, r6
 800334c:	f7fc ff98 	bl	8000280 <__aeabi_uldivmod>
 8003350:	4603      	mov	r3, r0
 8003352:	460c      	mov	r4, r1
 8003354:	461a      	mov	r2, r3
 8003356:	4b32      	ldr	r3, [pc, #200]	; (8003420 <UART_SetConfig+0x6f4>)
 8003358:	fba3 1302 	umull	r1, r3, r3, r2
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	2164      	movs	r1, #100	; 0x64
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	3332      	adds	r3, #50	; 0x32
 800336a:	4a2d      	ldr	r2, [pc, #180]	; (8003420 <UART_SetConfig+0x6f4>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003376:	4498      	add	r8, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	469b      	mov	fp, r3
 800337c:	f04f 0c00 	mov.w	ip, #0
 8003380:	46d9      	mov	r9, fp
 8003382:	46e2      	mov	sl, ip
 8003384:	eb19 0309 	adds.w	r3, r9, r9
 8003388:	eb4a 040a 	adc.w	r4, sl, sl
 800338c:	4699      	mov	r9, r3
 800338e:	46a2      	mov	sl, r4
 8003390:	eb19 090b 	adds.w	r9, r9, fp
 8003394:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033ac:	4689      	mov	r9, r1
 80033ae:	4692      	mov	sl, r2
 80033b0:	eb1b 0509 	adds.w	r5, fp, r9
 80033b4:	eb4c 060a 	adc.w	r6, ip, sl
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4619      	mov	r1, r3
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	f04f 0400 	mov.w	r4, #0
 80033ca:	0094      	lsls	r4, r2, #2
 80033cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033d0:	008b      	lsls	r3, r1, #2
 80033d2:	461a      	mov	r2, r3
 80033d4:	4623      	mov	r3, r4
 80033d6:	4628      	mov	r0, r5
 80033d8:	4631      	mov	r1, r6
 80033da:	f7fc ff51 	bl	8000280 <__aeabi_uldivmod>
 80033de:	4603      	mov	r3, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <UART_SetConfig+0x6f4>)
 80033e6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2164      	movs	r1, #100	; 0x64
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	3332      	adds	r3, #50	; 0x32
 80033f8:	4a09      	ldr	r2, [pc, #36]	; (8003420 <UART_SetConfig+0x6f4>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	f003 020f 	and.w	r2, r3, #15
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4442      	add	r2, r8
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	e7ff      	b.n	800340e <UART_SetConfig+0x6e2>
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003418:	40011000 	.word	0x40011000
 800341c:	40011400 	.word	0x40011400
 8003420:	51eb851f 	.word	0x51eb851f

08003424 <__errno>:
 8003424:	4b01      	ldr	r3, [pc, #4]	; (800342c <__errno+0x8>)
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000058 	.word	0x20000058

08003430 <__libc_init_array>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	4e0d      	ldr	r6, [pc, #52]	; (8003468 <__libc_init_array+0x38>)
 8003434:	4c0d      	ldr	r4, [pc, #52]	; (800346c <__libc_init_array+0x3c>)
 8003436:	1ba4      	subs	r4, r4, r6
 8003438:	10a4      	asrs	r4, r4, #2
 800343a:	2500      	movs	r5, #0
 800343c:	42a5      	cmp	r5, r4
 800343e:	d109      	bne.n	8003454 <__libc_init_array+0x24>
 8003440:	4e0b      	ldr	r6, [pc, #44]	; (8003470 <__libc_init_array+0x40>)
 8003442:	4c0c      	ldr	r4, [pc, #48]	; (8003474 <__libc_init_array+0x44>)
 8003444:	f000 ffbe 	bl	80043c4 <_init>
 8003448:	1ba4      	subs	r4, r4, r6
 800344a:	10a4      	asrs	r4, r4, #2
 800344c:	2500      	movs	r5, #0
 800344e:	42a5      	cmp	r5, r4
 8003450:	d105      	bne.n	800345e <__libc_init_array+0x2e>
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003458:	4798      	blx	r3
 800345a:	3501      	adds	r5, #1
 800345c:	e7ee      	b.n	800343c <__libc_init_array+0xc>
 800345e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003462:	4798      	blx	r3
 8003464:	3501      	adds	r5, #1
 8003466:	e7f2      	b.n	800344e <__libc_init_array+0x1e>
 8003468:	08004610 	.word	0x08004610
 800346c:	08004610 	.word	0x08004610
 8003470:	08004610 	.word	0x08004610
 8003474:	08004614 	.word	0x08004614

08003478 <memcpy>:
 8003478:	b510      	push	{r4, lr}
 800347a:	1e43      	subs	r3, r0, #1
 800347c:	440a      	add	r2, r1
 800347e:	4291      	cmp	r1, r2
 8003480:	d100      	bne.n	8003484 <memcpy+0xc>
 8003482:	bd10      	pop	{r4, pc}
 8003484:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003488:	f803 4f01 	strb.w	r4, [r3, #1]!
 800348c:	e7f7      	b.n	800347e <memcpy+0x6>

0800348e <memset>:
 800348e:	4402      	add	r2, r0
 8003490:	4603      	mov	r3, r0
 8003492:	4293      	cmp	r3, r2
 8003494:	d100      	bne.n	8003498 <memset+0xa>
 8003496:	4770      	bx	lr
 8003498:	f803 1b01 	strb.w	r1, [r3], #1
 800349c:	e7f9      	b.n	8003492 <memset+0x4>
	...

080034a0 <iprintf>:
 80034a0:	b40f      	push	{r0, r1, r2, r3}
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <iprintf+0x2c>)
 80034a4:	b513      	push	{r0, r1, r4, lr}
 80034a6:	681c      	ldr	r4, [r3, #0]
 80034a8:	b124      	cbz	r4, 80034b4 <iprintf+0x14>
 80034aa:	69a3      	ldr	r3, [r4, #24]
 80034ac:	b913      	cbnz	r3, 80034b4 <iprintf+0x14>
 80034ae:	4620      	mov	r0, r4
 80034b0:	f000 fa36 	bl	8003920 <__sinit>
 80034b4:	ab05      	add	r3, sp, #20
 80034b6:	9a04      	ldr	r2, [sp, #16]
 80034b8:	68a1      	ldr	r1, [r4, #8]
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	4620      	mov	r0, r4
 80034be:	f000 fbef 	bl	8003ca0 <_vfiprintf_r>
 80034c2:	b002      	add	sp, #8
 80034c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034c8:	b004      	add	sp, #16
 80034ca:	4770      	bx	lr
 80034cc:	20000058 	.word	0x20000058

080034d0 <putchar>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <putchar+0x24>)
 80034d4:	681c      	ldr	r4, [r3, #0]
 80034d6:	4605      	mov	r5, r0
 80034d8:	b124      	cbz	r4, 80034e4 <putchar+0x14>
 80034da:	69a3      	ldr	r3, [r4, #24]
 80034dc:	b913      	cbnz	r3, 80034e4 <putchar+0x14>
 80034de:	4620      	mov	r0, r4
 80034e0:	f000 fa1e 	bl	8003920 <__sinit>
 80034e4:	68a2      	ldr	r2, [r4, #8]
 80034e6:	4629      	mov	r1, r5
 80034e8:	4620      	mov	r0, r4
 80034ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034ee:	f000 be75 	b.w	80041dc <_putc_r>
 80034f2:	bf00      	nop
 80034f4:	20000058 	.word	0x20000058

080034f8 <_puts_r>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	460e      	mov	r6, r1
 80034fc:	4605      	mov	r5, r0
 80034fe:	b118      	cbz	r0, 8003508 <_puts_r+0x10>
 8003500:	6983      	ldr	r3, [r0, #24]
 8003502:	b90b      	cbnz	r3, 8003508 <_puts_r+0x10>
 8003504:	f000 fa0c 	bl	8003920 <__sinit>
 8003508:	69ab      	ldr	r3, [r5, #24]
 800350a:	68ac      	ldr	r4, [r5, #8]
 800350c:	b913      	cbnz	r3, 8003514 <_puts_r+0x1c>
 800350e:	4628      	mov	r0, r5
 8003510:	f000 fa06 	bl	8003920 <__sinit>
 8003514:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <_puts_r+0xac>)
 8003516:	429c      	cmp	r4, r3
 8003518:	d117      	bne.n	800354a <_puts_r+0x52>
 800351a:	686c      	ldr	r4, [r5, #4]
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	071b      	lsls	r3, r3, #28
 8003520:	d51d      	bpl.n	800355e <_puts_r+0x66>
 8003522:	6923      	ldr	r3, [r4, #16]
 8003524:	b1db      	cbz	r3, 800355e <_puts_r+0x66>
 8003526:	3e01      	subs	r6, #1
 8003528:	68a3      	ldr	r3, [r4, #8]
 800352a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800352e:	3b01      	subs	r3, #1
 8003530:	60a3      	str	r3, [r4, #8]
 8003532:	b9e9      	cbnz	r1, 8003570 <_puts_r+0x78>
 8003534:	2b00      	cmp	r3, #0
 8003536:	da2e      	bge.n	8003596 <_puts_r+0x9e>
 8003538:	4622      	mov	r2, r4
 800353a:	210a      	movs	r1, #10
 800353c:	4628      	mov	r0, r5
 800353e:	f000 f83f 	bl	80035c0 <__swbuf_r>
 8003542:	3001      	adds	r0, #1
 8003544:	d011      	beq.n	800356a <_puts_r+0x72>
 8003546:	200a      	movs	r0, #10
 8003548:	e011      	b.n	800356e <_puts_r+0x76>
 800354a:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <_puts_r+0xb0>)
 800354c:	429c      	cmp	r4, r3
 800354e:	d101      	bne.n	8003554 <_puts_r+0x5c>
 8003550:	68ac      	ldr	r4, [r5, #8]
 8003552:	e7e3      	b.n	800351c <_puts_r+0x24>
 8003554:	4b15      	ldr	r3, [pc, #84]	; (80035ac <_puts_r+0xb4>)
 8003556:	429c      	cmp	r4, r3
 8003558:	bf08      	it	eq
 800355a:	68ec      	ldreq	r4, [r5, #12]
 800355c:	e7de      	b.n	800351c <_puts_r+0x24>
 800355e:	4621      	mov	r1, r4
 8003560:	4628      	mov	r0, r5
 8003562:	f000 f87f 	bl	8003664 <__swsetup_r>
 8003566:	2800      	cmp	r0, #0
 8003568:	d0dd      	beq.n	8003526 <_puts_r+0x2e>
 800356a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	2b00      	cmp	r3, #0
 8003572:	da04      	bge.n	800357e <_puts_r+0x86>
 8003574:	69a2      	ldr	r2, [r4, #24]
 8003576:	429a      	cmp	r2, r3
 8003578:	dc06      	bgt.n	8003588 <_puts_r+0x90>
 800357a:	290a      	cmp	r1, #10
 800357c:	d004      	beq.n	8003588 <_puts_r+0x90>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	6022      	str	r2, [r4, #0]
 8003584:	7019      	strb	r1, [r3, #0]
 8003586:	e7cf      	b.n	8003528 <_puts_r+0x30>
 8003588:	4622      	mov	r2, r4
 800358a:	4628      	mov	r0, r5
 800358c:	f000 f818 	bl	80035c0 <__swbuf_r>
 8003590:	3001      	adds	r0, #1
 8003592:	d1c9      	bne.n	8003528 <_puts_r+0x30>
 8003594:	e7e9      	b.n	800356a <_puts_r+0x72>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	200a      	movs	r0, #10
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	6022      	str	r2, [r4, #0]
 800359e:	7018      	strb	r0, [r3, #0]
 80035a0:	e7e5      	b.n	800356e <_puts_r+0x76>
 80035a2:	bf00      	nop
 80035a4:	08004594 	.word	0x08004594
 80035a8:	080045b4 	.word	0x080045b4
 80035ac:	08004574 	.word	0x08004574

080035b0 <puts>:
 80035b0:	4b02      	ldr	r3, [pc, #8]	; (80035bc <puts+0xc>)
 80035b2:	4601      	mov	r1, r0
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	f7ff bf9f 	b.w	80034f8 <_puts_r>
 80035ba:	bf00      	nop
 80035bc:	20000058 	.word	0x20000058

080035c0 <__swbuf_r>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	460e      	mov	r6, r1
 80035c4:	4614      	mov	r4, r2
 80035c6:	4605      	mov	r5, r0
 80035c8:	b118      	cbz	r0, 80035d2 <__swbuf_r+0x12>
 80035ca:	6983      	ldr	r3, [r0, #24]
 80035cc:	b90b      	cbnz	r3, 80035d2 <__swbuf_r+0x12>
 80035ce:	f000 f9a7 	bl	8003920 <__sinit>
 80035d2:	4b21      	ldr	r3, [pc, #132]	; (8003658 <__swbuf_r+0x98>)
 80035d4:	429c      	cmp	r4, r3
 80035d6:	d12a      	bne.n	800362e <__swbuf_r+0x6e>
 80035d8:	686c      	ldr	r4, [r5, #4]
 80035da:	69a3      	ldr	r3, [r4, #24]
 80035dc:	60a3      	str	r3, [r4, #8]
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	071a      	lsls	r2, r3, #28
 80035e2:	d52e      	bpl.n	8003642 <__swbuf_r+0x82>
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	b363      	cbz	r3, 8003642 <__swbuf_r+0x82>
 80035e8:	6923      	ldr	r3, [r4, #16]
 80035ea:	6820      	ldr	r0, [r4, #0]
 80035ec:	1ac0      	subs	r0, r0, r3
 80035ee:	6963      	ldr	r3, [r4, #20]
 80035f0:	b2f6      	uxtb	r6, r6
 80035f2:	4283      	cmp	r3, r0
 80035f4:	4637      	mov	r7, r6
 80035f6:	dc04      	bgt.n	8003602 <__swbuf_r+0x42>
 80035f8:	4621      	mov	r1, r4
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 f926 	bl	800384c <_fflush_r>
 8003600:	bb28      	cbnz	r0, 800364e <__swbuf_r+0x8e>
 8003602:	68a3      	ldr	r3, [r4, #8]
 8003604:	3b01      	subs	r3, #1
 8003606:	60a3      	str	r3, [r4, #8]
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	6022      	str	r2, [r4, #0]
 800360e:	701e      	strb	r6, [r3, #0]
 8003610:	6963      	ldr	r3, [r4, #20]
 8003612:	3001      	adds	r0, #1
 8003614:	4283      	cmp	r3, r0
 8003616:	d004      	beq.n	8003622 <__swbuf_r+0x62>
 8003618:	89a3      	ldrh	r3, [r4, #12]
 800361a:	07db      	lsls	r3, r3, #31
 800361c:	d519      	bpl.n	8003652 <__swbuf_r+0x92>
 800361e:	2e0a      	cmp	r6, #10
 8003620:	d117      	bne.n	8003652 <__swbuf_r+0x92>
 8003622:	4621      	mov	r1, r4
 8003624:	4628      	mov	r0, r5
 8003626:	f000 f911 	bl	800384c <_fflush_r>
 800362a:	b190      	cbz	r0, 8003652 <__swbuf_r+0x92>
 800362c:	e00f      	b.n	800364e <__swbuf_r+0x8e>
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <__swbuf_r+0x9c>)
 8003630:	429c      	cmp	r4, r3
 8003632:	d101      	bne.n	8003638 <__swbuf_r+0x78>
 8003634:	68ac      	ldr	r4, [r5, #8]
 8003636:	e7d0      	b.n	80035da <__swbuf_r+0x1a>
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <__swbuf_r+0xa0>)
 800363a:	429c      	cmp	r4, r3
 800363c:	bf08      	it	eq
 800363e:	68ec      	ldreq	r4, [r5, #12]
 8003640:	e7cb      	b.n	80035da <__swbuf_r+0x1a>
 8003642:	4621      	mov	r1, r4
 8003644:	4628      	mov	r0, r5
 8003646:	f000 f80d 	bl	8003664 <__swsetup_r>
 800364a:	2800      	cmp	r0, #0
 800364c:	d0cc      	beq.n	80035e8 <__swbuf_r+0x28>
 800364e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003652:	4638      	mov	r0, r7
 8003654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003656:	bf00      	nop
 8003658:	08004594 	.word	0x08004594
 800365c:	080045b4 	.word	0x080045b4
 8003660:	08004574 	.word	0x08004574

08003664 <__swsetup_r>:
 8003664:	4b32      	ldr	r3, [pc, #200]	; (8003730 <__swsetup_r+0xcc>)
 8003666:	b570      	push	{r4, r5, r6, lr}
 8003668:	681d      	ldr	r5, [r3, #0]
 800366a:	4606      	mov	r6, r0
 800366c:	460c      	mov	r4, r1
 800366e:	b125      	cbz	r5, 800367a <__swsetup_r+0x16>
 8003670:	69ab      	ldr	r3, [r5, #24]
 8003672:	b913      	cbnz	r3, 800367a <__swsetup_r+0x16>
 8003674:	4628      	mov	r0, r5
 8003676:	f000 f953 	bl	8003920 <__sinit>
 800367a:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <__swsetup_r+0xd0>)
 800367c:	429c      	cmp	r4, r3
 800367e:	d10f      	bne.n	80036a0 <__swsetup_r+0x3c>
 8003680:	686c      	ldr	r4, [r5, #4]
 8003682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003686:	b29a      	uxth	r2, r3
 8003688:	0715      	lsls	r5, r2, #28
 800368a:	d42c      	bmi.n	80036e6 <__swsetup_r+0x82>
 800368c:	06d0      	lsls	r0, r2, #27
 800368e:	d411      	bmi.n	80036b4 <__swsetup_r+0x50>
 8003690:	2209      	movs	r2, #9
 8003692:	6032      	str	r2, [r6, #0]
 8003694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003698:	81a3      	strh	r3, [r4, #12]
 800369a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800369e:	e03e      	b.n	800371e <__swsetup_r+0xba>
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <__swsetup_r+0xd4>)
 80036a2:	429c      	cmp	r4, r3
 80036a4:	d101      	bne.n	80036aa <__swsetup_r+0x46>
 80036a6:	68ac      	ldr	r4, [r5, #8]
 80036a8:	e7eb      	b.n	8003682 <__swsetup_r+0x1e>
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <__swsetup_r+0xd8>)
 80036ac:	429c      	cmp	r4, r3
 80036ae:	bf08      	it	eq
 80036b0:	68ec      	ldreq	r4, [r5, #12]
 80036b2:	e7e6      	b.n	8003682 <__swsetup_r+0x1e>
 80036b4:	0751      	lsls	r1, r2, #29
 80036b6:	d512      	bpl.n	80036de <__swsetup_r+0x7a>
 80036b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036ba:	b141      	cbz	r1, 80036ce <__swsetup_r+0x6a>
 80036bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036c0:	4299      	cmp	r1, r3
 80036c2:	d002      	beq.n	80036ca <__swsetup_r+0x66>
 80036c4:	4630      	mov	r0, r6
 80036c6:	f000 fa19 	bl	8003afc <_free_r>
 80036ca:	2300      	movs	r3, #0
 80036cc:	6363      	str	r3, [r4, #52]	; 0x34
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036d4:	81a3      	strh	r3, [r4, #12]
 80036d6:	2300      	movs	r3, #0
 80036d8:	6063      	str	r3, [r4, #4]
 80036da:	6923      	ldr	r3, [r4, #16]
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	f043 0308 	orr.w	r3, r3, #8
 80036e4:	81a3      	strh	r3, [r4, #12]
 80036e6:	6923      	ldr	r3, [r4, #16]
 80036e8:	b94b      	cbnz	r3, 80036fe <__swsetup_r+0x9a>
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f4:	d003      	beq.n	80036fe <__swsetup_r+0x9a>
 80036f6:	4621      	mov	r1, r4
 80036f8:	4630      	mov	r0, r6
 80036fa:	f000 f9bf 	bl	8003a7c <__smakebuf_r>
 80036fe:	89a2      	ldrh	r2, [r4, #12]
 8003700:	f012 0301 	ands.w	r3, r2, #1
 8003704:	d00c      	beq.n	8003720 <__swsetup_r+0xbc>
 8003706:	2300      	movs	r3, #0
 8003708:	60a3      	str	r3, [r4, #8]
 800370a:	6963      	ldr	r3, [r4, #20]
 800370c:	425b      	negs	r3, r3
 800370e:	61a3      	str	r3, [r4, #24]
 8003710:	6923      	ldr	r3, [r4, #16]
 8003712:	b953      	cbnz	r3, 800372a <__swsetup_r+0xc6>
 8003714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003718:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800371c:	d1ba      	bne.n	8003694 <__swsetup_r+0x30>
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	0792      	lsls	r2, r2, #30
 8003722:	bf58      	it	pl
 8003724:	6963      	ldrpl	r3, [r4, #20]
 8003726:	60a3      	str	r3, [r4, #8]
 8003728:	e7f2      	b.n	8003710 <__swsetup_r+0xac>
 800372a:	2000      	movs	r0, #0
 800372c:	e7f7      	b.n	800371e <__swsetup_r+0xba>
 800372e:	bf00      	nop
 8003730:	20000058 	.word	0x20000058
 8003734:	08004594 	.word	0x08004594
 8003738:	080045b4 	.word	0x080045b4
 800373c:	08004574 	.word	0x08004574

08003740 <__sflush_r>:
 8003740:	898a      	ldrh	r2, [r1, #12]
 8003742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003746:	4605      	mov	r5, r0
 8003748:	0710      	lsls	r0, r2, #28
 800374a:	460c      	mov	r4, r1
 800374c:	d458      	bmi.n	8003800 <__sflush_r+0xc0>
 800374e:	684b      	ldr	r3, [r1, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	dc05      	bgt.n	8003760 <__sflush_r+0x20>
 8003754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	dc02      	bgt.n	8003760 <__sflush_r+0x20>
 800375a:	2000      	movs	r0, #0
 800375c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003762:	2e00      	cmp	r6, #0
 8003764:	d0f9      	beq.n	800375a <__sflush_r+0x1a>
 8003766:	2300      	movs	r3, #0
 8003768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800376c:	682f      	ldr	r7, [r5, #0]
 800376e:	6a21      	ldr	r1, [r4, #32]
 8003770:	602b      	str	r3, [r5, #0]
 8003772:	d032      	beq.n	80037da <__sflush_r+0x9a>
 8003774:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	075a      	lsls	r2, r3, #29
 800377a:	d505      	bpl.n	8003788 <__sflush_r+0x48>
 800377c:	6863      	ldr	r3, [r4, #4]
 800377e:	1ac0      	subs	r0, r0, r3
 8003780:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003782:	b10b      	cbz	r3, 8003788 <__sflush_r+0x48>
 8003784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003786:	1ac0      	subs	r0, r0, r3
 8003788:	2300      	movs	r3, #0
 800378a:	4602      	mov	r2, r0
 800378c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800378e:	6a21      	ldr	r1, [r4, #32]
 8003790:	4628      	mov	r0, r5
 8003792:	47b0      	blx	r6
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	d106      	bne.n	80037a8 <__sflush_r+0x68>
 800379a:	6829      	ldr	r1, [r5, #0]
 800379c:	291d      	cmp	r1, #29
 800379e:	d848      	bhi.n	8003832 <__sflush_r+0xf2>
 80037a0:	4a29      	ldr	r2, [pc, #164]	; (8003848 <__sflush_r+0x108>)
 80037a2:	40ca      	lsrs	r2, r1
 80037a4:	07d6      	lsls	r6, r2, #31
 80037a6:	d544      	bpl.n	8003832 <__sflush_r+0xf2>
 80037a8:	2200      	movs	r2, #0
 80037aa:	6062      	str	r2, [r4, #4]
 80037ac:	04d9      	lsls	r1, r3, #19
 80037ae:	6922      	ldr	r2, [r4, #16]
 80037b0:	6022      	str	r2, [r4, #0]
 80037b2:	d504      	bpl.n	80037be <__sflush_r+0x7e>
 80037b4:	1c42      	adds	r2, r0, #1
 80037b6:	d101      	bne.n	80037bc <__sflush_r+0x7c>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	b903      	cbnz	r3, 80037be <__sflush_r+0x7e>
 80037bc:	6560      	str	r0, [r4, #84]	; 0x54
 80037be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037c0:	602f      	str	r7, [r5, #0]
 80037c2:	2900      	cmp	r1, #0
 80037c4:	d0c9      	beq.n	800375a <__sflush_r+0x1a>
 80037c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037ca:	4299      	cmp	r1, r3
 80037cc:	d002      	beq.n	80037d4 <__sflush_r+0x94>
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 f994 	bl	8003afc <_free_r>
 80037d4:	2000      	movs	r0, #0
 80037d6:	6360      	str	r0, [r4, #52]	; 0x34
 80037d8:	e7c0      	b.n	800375c <__sflush_r+0x1c>
 80037da:	2301      	movs	r3, #1
 80037dc:	4628      	mov	r0, r5
 80037de:	47b0      	blx	r6
 80037e0:	1c41      	adds	r1, r0, #1
 80037e2:	d1c8      	bne.n	8003776 <__sflush_r+0x36>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0c5      	beq.n	8003776 <__sflush_r+0x36>
 80037ea:	2b1d      	cmp	r3, #29
 80037ec:	d001      	beq.n	80037f2 <__sflush_r+0xb2>
 80037ee:	2b16      	cmp	r3, #22
 80037f0:	d101      	bne.n	80037f6 <__sflush_r+0xb6>
 80037f2:	602f      	str	r7, [r5, #0]
 80037f4:	e7b1      	b.n	800375a <__sflush_r+0x1a>
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037fc:	81a3      	strh	r3, [r4, #12]
 80037fe:	e7ad      	b.n	800375c <__sflush_r+0x1c>
 8003800:	690f      	ldr	r7, [r1, #16]
 8003802:	2f00      	cmp	r7, #0
 8003804:	d0a9      	beq.n	800375a <__sflush_r+0x1a>
 8003806:	0793      	lsls	r3, r2, #30
 8003808:	680e      	ldr	r6, [r1, #0]
 800380a:	bf08      	it	eq
 800380c:	694b      	ldreq	r3, [r1, #20]
 800380e:	600f      	str	r7, [r1, #0]
 8003810:	bf18      	it	ne
 8003812:	2300      	movne	r3, #0
 8003814:	eba6 0807 	sub.w	r8, r6, r7
 8003818:	608b      	str	r3, [r1, #8]
 800381a:	f1b8 0f00 	cmp.w	r8, #0
 800381e:	dd9c      	ble.n	800375a <__sflush_r+0x1a>
 8003820:	4643      	mov	r3, r8
 8003822:	463a      	mov	r2, r7
 8003824:	6a21      	ldr	r1, [r4, #32]
 8003826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003828:	4628      	mov	r0, r5
 800382a:	47b0      	blx	r6
 800382c:	2800      	cmp	r0, #0
 800382e:	dc06      	bgt.n	800383e <__sflush_r+0xfe>
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003836:	81a3      	strh	r3, [r4, #12]
 8003838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800383c:	e78e      	b.n	800375c <__sflush_r+0x1c>
 800383e:	4407      	add	r7, r0
 8003840:	eba8 0800 	sub.w	r8, r8, r0
 8003844:	e7e9      	b.n	800381a <__sflush_r+0xda>
 8003846:	bf00      	nop
 8003848:	20400001 	.word	0x20400001

0800384c <_fflush_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	690b      	ldr	r3, [r1, #16]
 8003850:	4605      	mov	r5, r0
 8003852:	460c      	mov	r4, r1
 8003854:	b1db      	cbz	r3, 800388e <_fflush_r+0x42>
 8003856:	b118      	cbz	r0, 8003860 <_fflush_r+0x14>
 8003858:	6983      	ldr	r3, [r0, #24]
 800385a:	b90b      	cbnz	r3, 8003860 <_fflush_r+0x14>
 800385c:	f000 f860 	bl	8003920 <__sinit>
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <_fflush_r+0x48>)
 8003862:	429c      	cmp	r4, r3
 8003864:	d109      	bne.n	800387a <_fflush_r+0x2e>
 8003866:	686c      	ldr	r4, [r5, #4]
 8003868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800386c:	b17b      	cbz	r3, 800388e <_fflush_r+0x42>
 800386e:	4621      	mov	r1, r4
 8003870:	4628      	mov	r0, r5
 8003872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003876:	f7ff bf63 	b.w	8003740 <__sflush_r>
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <_fflush_r+0x4c>)
 800387c:	429c      	cmp	r4, r3
 800387e:	d101      	bne.n	8003884 <_fflush_r+0x38>
 8003880:	68ac      	ldr	r4, [r5, #8]
 8003882:	e7f1      	b.n	8003868 <_fflush_r+0x1c>
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <_fflush_r+0x50>)
 8003886:	429c      	cmp	r4, r3
 8003888:	bf08      	it	eq
 800388a:	68ec      	ldreq	r4, [r5, #12]
 800388c:	e7ec      	b.n	8003868 <_fflush_r+0x1c>
 800388e:	2000      	movs	r0, #0
 8003890:	bd38      	pop	{r3, r4, r5, pc}
 8003892:	bf00      	nop
 8003894:	08004594 	.word	0x08004594
 8003898:	080045b4 	.word	0x080045b4
 800389c:	08004574 	.word	0x08004574

080038a0 <std>:
 80038a0:	2300      	movs	r3, #0
 80038a2:	b510      	push	{r4, lr}
 80038a4:	4604      	mov	r4, r0
 80038a6:	e9c0 3300 	strd	r3, r3, [r0]
 80038aa:	6083      	str	r3, [r0, #8]
 80038ac:	8181      	strh	r1, [r0, #12]
 80038ae:	6643      	str	r3, [r0, #100]	; 0x64
 80038b0:	81c2      	strh	r2, [r0, #14]
 80038b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038b6:	6183      	str	r3, [r0, #24]
 80038b8:	4619      	mov	r1, r3
 80038ba:	2208      	movs	r2, #8
 80038bc:	305c      	adds	r0, #92	; 0x5c
 80038be:	f7ff fde6 	bl	800348e <memset>
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <std+0x38>)
 80038c4:	6263      	str	r3, [r4, #36]	; 0x24
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <std+0x3c>)
 80038c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <std+0x40>)
 80038cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <std+0x44>)
 80038d0:	6224      	str	r4, [r4, #32]
 80038d2:	6323      	str	r3, [r4, #48]	; 0x30
 80038d4:	bd10      	pop	{r4, pc}
 80038d6:	bf00      	nop
 80038d8:	08004269 	.word	0x08004269
 80038dc:	0800428b 	.word	0x0800428b
 80038e0:	080042c3 	.word	0x080042c3
 80038e4:	080042e7 	.word	0x080042e7

080038e8 <_cleanup_r>:
 80038e8:	4901      	ldr	r1, [pc, #4]	; (80038f0 <_cleanup_r+0x8>)
 80038ea:	f000 b885 	b.w	80039f8 <_fwalk_reent>
 80038ee:	bf00      	nop
 80038f0:	0800384d 	.word	0x0800384d

080038f4 <__sfmoreglue>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	1e4a      	subs	r2, r1, #1
 80038f8:	2568      	movs	r5, #104	; 0x68
 80038fa:	4355      	muls	r5, r2
 80038fc:	460e      	mov	r6, r1
 80038fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003902:	f000 f949 	bl	8003b98 <_malloc_r>
 8003906:	4604      	mov	r4, r0
 8003908:	b140      	cbz	r0, 800391c <__sfmoreglue+0x28>
 800390a:	2100      	movs	r1, #0
 800390c:	e9c0 1600 	strd	r1, r6, [r0]
 8003910:	300c      	adds	r0, #12
 8003912:	60a0      	str	r0, [r4, #8]
 8003914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003918:	f7ff fdb9 	bl	800348e <memset>
 800391c:	4620      	mov	r0, r4
 800391e:	bd70      	pop	{r4, r5, r6, pc}

08003920 <__sinit>:
 8003920:	6983      	ldr	r3, [r0, #24]
 8003922:	b510      	push	{r4, lr}
 8003924:	4604      	mov	r4, r0
 8003926:	bb33      	cbnz	r3, 8003976 <__sinit+0x56>
 8003928:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800392c:	6503      	str	r3, [r0, #80]	; 0x50
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <__sinit+0x58>)
 8003930:	4a12      	ldr	r2, [pc, #72]	; (800397c <__sinit+0x5c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6282      	str	r2, [r0, #40]	; 0x28
 8003936:	4298      	cmp	r0, r3
 8003938:	bf04      	itt	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	6183      	streq	r3, [r0, #24]
 800393e:	f000 f81f 	bl	8003980 <__sfp>
 8003942:	6060      	str	r0, [r4, #4]
 8003944:	4620      	mov	r0, r4
 8003946:	f000 f81b 	bl	8003980 <__sfp>
 800394a:	60a0      	str	r0, [r4, #8]
 800394c:	4620      	mov	r0, r4
 800394e:	f000 f817 	bl	8003980 <__sfp>
 8003952:	2200      	movs	r2, #0
 8003954:	60e0      	str	r0, [r4, #12]
 8003956:	2104      	movs	r1, #4
 8003958:	6860      	ldr	r0, [r4, #4]
 800395a:	f7ff ffa1 	bl	80038a0 <std>
 800395e:	2201      	movs	r2, #1
 8003960:	2109      	movs	r1, #9
 8003962:	68a0      	ldr	r0, [r4, #8]
 8003964:	f7ff ff9c 	bl	80038a0 <std>
 8003968:	2202      	movs	r2, #2
 800396a:	2112      	movs	r1, #18
 800396c:	68e0      	ldr	r0, [r4, #12]
 800396e:	f7ff ff97 	bl	80038a0 <std>
 8003972:	2301      	movs	r3, #1
 8003974:	61a3      	str	r3, [r4, #24]
 8003976:	bd10      	pop	{r4, pc}
 8003978:	08004570 	.word	0x08004570
 800397c:	080038e9 	.word	0x080038e9

08003980 <__sfp>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <__sfp+0x70>)
 8003984:	681e      	ldr	r6, [r3, #0]
 8003986:	69b3      	ldr	r3, [r6, #24]
 8003988:	4607      	mov	r7, r0
 800398a:	b913      	cbnz	r3, 8003992 <__sfp+0x12>
 800398c:	4630      	mov	r0, r6
 800398e:	f7ff ffc7 	bl	8003920 <__sinit>
 8003992:	3648      	adds	r6, #72	; 0x48
 8003994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003998:	3b01      	subs	r3, #1
 800399a:	d503      	bpl.n	80039a4 <__sfp+0x24>
 800399c:	6833      	ldr	r3, [r6, #0]
 800399e:	b133      	cbz	r3, 80039ae <__sfp+0x2e>
 80039a0:	6836      	ldr	r6, [r6, #0]
 80039a2:	e7f7      	b.n	8003994 <__sfp+0x14>
 80039a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039a8:	b16d      	cbz	r5, 80039c6 <__sfp+0x46>
 80039aa:	3468      	adds	r4, #104	; 0x68
 80039ac:	e7f4      	b.n	8003998 <__sfp+0x18>
 80039ae:	2104      	movs	r1, #4
 80039b0:	4638      	mov	r0, r7
 80039b2:	f7ff ff9f 	bl	80038f4 <__sfmoreglue>
 80039b6:	6030      	str	r0, [r6, #0]
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d1f1      	bne.n	80039a0 <__sfp+0x20>
 80039bc:	230c      	movs	r3, #12
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4604      	mov	r4, r0
 80039c2:	4620      	mov	r0, r4
 80039c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <__sfp+0x74>)
 80039c8:	6665      	str	r5, [r4, #100]	; 0x64
 80039ca:	e9c4 5500 	strd	r5, r5, [r4]
 80039ce:	60a5      	str	r5, [r4, #8]
 80039d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80039d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80039d8:	2208      	movs	r2, #8
 80039da:	4629      	mov	r1, r5
 80039dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039e0:	f7ff fd55 	bl	800348e <memset>
 80039e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039ec:	e7e9      	b.n	80039c2 <__sfp+0x42>
 80039ee:	bf00      	nop
 80039f0:	08004570 	.word	0x08004570
 80039f4:	ffff0001 	.word	0xffff0001

080039f8 <_fwalk_reent>:
 80039f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039fc:	4680      	mov	r8, r0
 80039fe:	4689      	mov	r9, r1
 8003a00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a04:	2600      	movs	r6, #0
 8003a06:	b914      	cbnz	r4, 8003a0e <_fwalk_reent+0x16>
 8003a08:	4630      	mov	r0, r6
 8003a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003a12:	3f01      	subs	r7, #1
 8003a14:	d501      	bpl.n	8003a1a <_fwalk_reent+0x22>
 8003a16:	6824      	ldr	r4, [r4, #0]
 8003a18:	e7f5      	b.n	8003a06 <_fwalk_reent+0xe>
 8003a1a:	89ab      	ldrh	r3, [r5, #12]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d907      	bls.n	8003a30 <_fwalk_reent+0x38>
 8003a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a24:	3301      	adds	r3, #1
 8003a26:	d003      	beq.n	8003a30 <_fwalk_reent+0x38>
 8003a28:	4629      	mov	r1, r5
 8003a2a:	4640      	mov	r0, r8
 8003a2c:	47c8      	blx	r9
 8003a2e:	4306      	orrs	r6, r0
 8003a30:	3568      	adds	r5, #104	; 0x68
 8003a32:	e7ee      	b.n	8003a12 <_fwalk_reent+0x1a>

08003a34 <__swhatbuf_r>:
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	460e      	mov	r6, r1
 8003a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	b096      	sub	sp, #88	; 0x58
 8003a40:	4614      	mov	r4, r2
 8003a42:	461d      	mov	r5, r3
 8003a44:	da07      	bge.n	8003a56 <__swhatbuf_r+0x22>
 8003a46:	2300      	movs	r3, #0
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	89b3      	ldrh	r3, [r6, #12]
 8003a4c:	061a      	lsls	r2, r3, #24
 8003a4e:	d410      	bmi.n	8003a72 <__swhatbuf_r+0x3e>
 8003a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a54:	e00e      	b.n	8003a74 <__swhatbuf_r+0x40>
 8003a56:	466a      	mov	r2, sp
 8003a58:	f000 fc6c 	bl	8004334 <_fstat_r>
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	dbf2      	blt.n	8003a46 <__swhatbuf_r+0x12>
 8003a60:	9a01      	ldr	r2, [sp, #4]
 8003a62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a6a:	425a      	negs	r2, r3
 8003a6c:	415a      	adcs	r2, r3
 8003a6e:	602a      	str	r2, [r5, #0]
 8003a70:	e7ee      	b.n	8003a50 <__swhatbuf_r+0x1c>
 8003a72:	2340      	movs	r3, #64	; 0x40
 8003a74:	2000      	movs	r0, #0
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	b016      	add	sp, #88	; 0x58
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}

08003a7c <__smakebuf_r>:
 8003a7c:	898b      	ldrh	r3, [r1, #12]
 8003a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a80:	079d      	lsls	r5, r3, #30
 8003a82:	4606      	mov	r6, r0
 8003a84:	460c      	mov	r4, r1
 8003a86:	d507      	bpl.n	8003a98 <__smakebuf_r+0x1c>
 8003a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	6123      	str	r3, [r4, #16]
 8003a90:	2301      	movs	r3, #1
 8003a92:	6163      	str	r3, [r4, #20]
 8003a94:	b002      	add	sp, #8
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	ab01      	add	r3, sp, #4
 8003a9a:	466a      	mov	r2, sp
 8003a9c:	f7ff ffca 	bl	8003a34 <__swhatbuf_r>
 8003aa0:	9900      	ldr	r1, [sp, #0]
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	f000 f877 	bl	8003b98 <_malloc_r>
 8003aaa:	b948      	cbnz	r0, 8003ac0 <__smakebuf_r+0x44>
 8003aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab0:	059a      	lsls	r2, r3, #22
 8003ab2:	d4ef      	bmi.n	8003a94 <__smakebuf_r+0x18>
 8003ab4:	f023 0303 	bic.w	r3, r3, #3
 8003ab8:	f043 0302 	orr.w	r3, r3, #2
 8003abc:	81a3      	strh	r3, [r4, #12]
 8003abe:	e7e3      	b.n	8003a88 <__smakebuf_r+0xc>
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <__smakebuf_r+0x7c>)
 8003ac2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ac4:	89a3      	ldrh	r3, [r4, #12]
 8003ac6:	6020      	str	r0, [r4, #0]
 8003ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003acc:	81a3      	strh	r3, [r4, #12]
 8003ace:	9b00      	ldr	r3, [sp, #0]
 8003ad0:	6163      	str	r3, [r4, #20]
 8003ad2:	9b01      	ldr	r3, [sp, #4]
 8003ad4:	6120      	str	r0, [r4, #16]
 8003ad6:	b15b      	cbz	r3, 8003af0 <__smakebuf_r+0x74>
 8003ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003adc:	4630      	mov	r0, r6
 8003ade:	f000 fc3b 	bl	8004358 <_isatty_r>
 8003ae2:	b128      	cbz	r0, 8003af0 <__smakebuf_r+0x74>
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	f023 0303 	bic.w	r3, r3, #3
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	81a3      	strh	r3, [r4, #12]
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	431d      	orrs	r5, r3
 8003af4:	81a5      	strh	r5, [r4, #12]
 8003af6:	e7cd      	b.n	8003a94 <__smakebuf_r+0x18>
 8003af8:	080038e9 	.word	0x080038e9

08003afc <_free_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4605      	mov	r5, r0
 8003b00:	2900      	cmp	r1, #0
 8003b02:	d045      	beq.n	8003b90 <_free_r+0x94>
 8003b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b08:	1f0c      	subs	r4, r1, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bfb8      	it	lt
 8003b0e:	18e4      	addlt	r4, r4, r3
 8003b10:	f000 fc44 	bl	800439c <__malloc_lock>
 8003b14:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <_free_r+0x98>)
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	4610      	mov	r0, r2
 8003b1a:	b933      	cbnz	r3, 8003b2a <_free_r+0x2e>
 8003b1c:	6063      	str	r3, [r4, #4]
 8003b1e:	6014      	str	r4, [r2, #0]
 8003b20:	4628      	mov	r0, r5
 8003b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b26:	f000 bc3a 	b.w	800439e <__malloc_unlock>
 8003b2a:	42a3      	cmp	r3, r4
 8003b2c:	d90c      	bls.n	8003b48 <_free_r+0x4c>
 8003b2e:	6821      	ldr	r1, [r4, #0]
 8003b30:	1862      	adds	r2, r4, r1
 8003b32:	4293      	cmp	r3, r2
 8003b34:	bf04      	itt	eq
 8003b36:	681a      	ldreq	r2, [r3, #0]
 8003b38:	685b      	ldreq	r3, [r3, #4]
 8003b3a:	6063      	str	r3, [r4, #4]
 8003b3c:	bf04      	itt	eq
 8003b3e:	1852      	addeq	r2, r2, r1
 8003b40:	6022      	streq	r2, [r4, #0]
 8003b42:	6004      	str	r4, [r0, #0]
 8003b44:	e7ec      	b.n	8003b20 <_free_r+0x24>
 8003b46:	4613      	mov	r3, r2
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	b10a      	cbz	r2, 8003b50 <_free_r+0x54>
 8003b4c:	42a2      	cmp	r2, r4
 8003b4e:	d9fa      	bls.n	8003b46 <_free_r+0x4a>
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	1858      	adds	r0, r3, r1
 8003b54:	42a0      	cmp	r0, r4
 8003b56:	d10b      	bne.n	8003b70 <_free_r+0x74>
 8003b58:	6820      	ldr	r0, [r4, #0]
 8003b5a:	4401      	add	r1, r0
 8003b5c:	1858      	adds	r0, r3, r1
 8003b5e:	4282      	cmp	r2, r0
 8003b60:	6019      	str	r1, [r3, #0]
 8003b62:	d1dd      	bne.n	8003b20 <_free_r+0x24>
 8003b64:	6810      	ldr	r0, [r2, #0]
 8003b66:	6852      	ldr	r2, [r2, #4]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	4401      	add	r1, r0
 8003b6c:	6019      	str	r1, [r3, #0]
 8003b6e:	e7d7      	b.n	8003b20 <_free_r+0x24>
 8003b70:	d902      	bls.n	8003b78 <_free_r+0x7c>
 8003b72:	230c      	movs	r3, #12
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	e7d3      	b.n	8003b20 <_free_r+0x24>
 8003b78:	6820      	ldr	r0, [r4, #0]
 8003b7a:	1821      	adds	r1, r4, r0
 8003b7c:	428a      	cmp	r2, r1
 8003b7e:	bf04      	itt	eq
 8003b80:	6811      	ldreq	r1, [r2, #0]
 8003b82:	6852      	ldreq	r2, [r2, #4]
 8003b84:	6062      	str	r2, [r4, #4]
 8003b86:	bf04      	itt	eq
 8003b88:	1809      	addeq	r1, r1, r0
 8003b8a:	6021      	streq	r1, [r4, #0]
 8003b8c:	605c      	str	r4, [r3, #4]
 8003b8e:	e7c7      	b.n	8003b20 <_free_r+0x24>
 8003b90:	bd38      	pop	{r3, r4, r5, pc}
 8003b92:	bf00      	nop
 8003b94:	200000e0 	.word	0x200000e0

08003b98 <_malloc_r>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	1ccd      	adds	r5, r1, #3
 8003b9c:	f025 0503 	bic.w	r5, r5, #3
 8003ba0:	3508      	adds	r5, #8
 8003ba2:	2d0c      	cmp	r5, #12
 8003ba4:	bf38      	it	cc
 8003ba6:	250c      	movcc	r5, #12
 8003ba8:	2d00      	cmp	r5, #0
 8003baa:	4606      	mov	r6, r0
 8003bac:	db01      	blt.n	8003bb2 <_malloc_r+0x1a>
 8003bae:	42a9      	cmp	r1, r5
 8003bb0:	d903      	bls.n	8003bba <_malloc_r+0x22>
 8003bb2:	230c      	movs	r3, #12
 8003bb4:	6033      	str	r3, [r6, #0]
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	bd70      	pop	{r4, r5, r6, pc}
 8003bba:	f000 fbef 	bl	800439c <__malloc_lock>
 8003bbe:	4a21      	ldr	r2, [pc, #132]	; (8003c44 <_malloc_r+0xac>)
 8003bc0:	6814      	ldr	r4, [r2, #0]
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	b991      	cbnz	r1, 8003bec <_malloc_r+0x54>
 8003bc6:	4c20      	ldr	r4, [pc, #128]	; (8003c48 <_malloc_r+0xb0>)
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	b91b      	cbnz	r3, 8003bd4 <_malloc_r+0x3c>
 8003bcc:	4630      	mov	r0, r6
 8003bce:	f000 fb3b 	bl	8004248 <_sbrk_r>
 8003bd2:	6020      	str	r0, [r4, #0]
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f000 fb36 	bl	8004248 <_sbrk_r>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d124      	bne.n	8003c2a <_malloc_r+0x92>
 8003be0:	230c      	movs	r3, #12
 8003be2:	6033      	str	r3, [r6, #0]
 8003be4:	4630      	mov	r0, r6
 8003be6:	f000 fbda 	bl	800439e <__malloc_unlock>
 8003bea:	e7e4      	b.n	8003bb6 <_malloc_r+0x1e>
 8003bec:	680b      	ldr	r3, [r1, #0]
 8003bee:	1b5b      	subs	r3, r3, r5
 8003bf0:	d418      	bmi.n	8003c24 <_malloc_r+0x8c>
 8003bf2:	2b0b      	cmp	r3, #11
 8003bf4:	d90f      	bls.n	8003c16 <_malloc_r+0x7e>
 8003bf6:	600b      	str	r3, [r1, #0]
 8003bf8:	50cd      	str	r5, [r1, r3]
 8003bfa:	18cc      	adds	r4, r1, r3
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f000 fbce 	bl	800439e <__malloc_unlock>
 8003c02:	f104 000b 	add.w	r0, r4, #11
 8003c06:	1d23      	adds	r3, r4, #4
 8003c08:	f020 0007 	bic.w	r0, r0, #7
 8003c0c:	1ac3      	subs	r3, r0, r3
 8003c0e:	d0d3      	beq.n	8003bb8 <_malloc_r+0x20>
 8003c10:	425a      	negs	r2, r3
 8003c12:	50e2      	str	r2, [r4, r3]
 8003c14:	e7d0      	b.n	8003bb8 <_malloc_r+0x20>
 8003c16:	428c      	cmp	r4, r1
 8003c18:	684b      	ldr	r3, [r1, #4]
 8003c1a:	bf16      	itet	ne
 8003c1c:	6063      	strne	r3, [r4, #4]
 8003c1e:	6013      	streq	r3, [r2, #0]
 8003c20:	460c      	movne	r4, r1
 8003c22:	e7eb      	b.n	8003bfc <_malloc_r+0x64>
 8003c24:	460c      	mov	r4, r1
 8003c26:	6849      	ldr	r1, [r1, #4]
 8003c28:	e7cc      	b.n	8003bc4 <_malloc_r+0x2c>
 8003c2a:	1cc4      	adds	r4, r0, #3
 8003c2c:	f024 0403 	bic.w	r4, r4, #3
 8003c30:	42a0      	cmp	r0, r4
 8003c32:	d005      	beq.n	8003c40 <_malloc_r+0xa8>
 8003c34:	1a21      	subs	r1, r4, r0
 8003c36:	4630      	mov	r0, r6
 8003c38:	f000 fb06 	bl	8004248 <_sbrk_r>
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d0cf      	beq.n	8003be0 <_malloc_r+0x48>
 8003c40:	6025      	str	r5, [r4, #0]
 8003c42:	e7db      	b.n	8003bfc <_malloc_r+0x64>
 8003c44:	200000e0 	.word	0x200000e0
 8003c48:	200000e4 	.word	0x200000e4

08003c4c <__sfputc_r>:
 8003c4c:	6893      	ldr	r3, [r2, #8]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	b410      	push	{r4}
 8003c54:	6093      	str	r3, [r2, #8]
 8003c56:	da08      	bge.n	8003c6a <__sfputc_r+0x1e>
 8003c58:	6994      	ldr	r4, [r2, #24]
 8003c5a:	42a3      	cmp	r3, r4
 8003c5c:	db01      	blt.n	8003c62 <__sfputc_r+0x16>
 8003c5e:	290a      	cmp	r1, #10
 8003c60:	d103      	bne.n	8003c6a <__sfputc_r+0x1e>
 8003c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c66:	f7ff bcab 	b.w	80035c0 <__swbuf_r>
 8003c6a:	6813      	ldr	r3, [r2, #0]
 8003c6c:	1c58      	adds	r0, r3, #1
 8003c6e:	6010      	str	r0, [r2, #0]
 8003c70:	7019      	strb	r1, [r3, #0]
 8003c72:	4608      	mov	r0, r1
 8003c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <__sfputs_r>:
 8003c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	460f      	mov	r7, r1
 8003c80:	4614      	mov	r4, r2
 8003c82:	18d5      	adds	r5, r2, r3
 8003c84:	42ac      	cmp	r4, r5
 8003c86:	d101      	bne.n	8003c8c <__sfputs_r+0x12>
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e007      	b.n	8003c9c <__sfputs_r+0x22>
 8003c8c:	463a      	mov	r2, r7
 8003c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c92:	4630      	mov	r0, r6
 8003c94:	f7ff ffda 	bl	8003c4c <__sfputc_r>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d1f3      	bne.n	8003c84 <__sfputs_r+0xa>
 8003c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ca0 <_vfiprintf_r>:
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	b09d      	sub	sp, #116	; 0x74
 8003ca8:	4617      	mov	r7, r2
 8003caa:	461d      	mov	r5, r3
 8003cac:	4606      	mov	r6, r0
 8003cae:	b118      	cbz	r0, 8003cb8 <_vfiprintf_r+0x18>
 8003cb0:	6983      	ldr	r3, [r0, #24]
 8003cb2:	b90b      	cbnz	r3, 8003cb8 <_vfiprintf_r+0x18>
 8003cb4:	f7ff fe34 	bl	8003920 <__sinit>
 8003cb8:	4b7c      	ldr	r3, [pc, #496]	; (8003eac <_vfiprintf_r+0x20c>)
 8003cba:	429c      	cmp	r4, r3
 8003cbc:	d158      	bne.n	8003d70 <_vfiprintf_r+0xd0>
 8003cbe:	6874      	ldr	r4, [r6, #4]
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	0718      	lsls	r0, r3, #28
 8003cc4:	d55e      	bpl.n	8003d84 <_vfiprintf_r+0xe4>
 8003cc6:	6923      	ldr	r3, [r4, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d05b      	beq.n	8003d84 <_vfiprintf_r+0xe4>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cd6:	2330      	movs	r3, #48	; 0x30
 8003cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cdc:	9503      	str	r5, [sp, #12]
 8003cde:	f04f 0b01 	mov.w	fp, #1
 8003ce2:	46b8      	mov	r8, r7
 8003ce4:	4645      	mov	r5, r8
 8003ce6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003cea:	b10b      	cbz	r3, 8003cf0 <_vfiprintf_r+0x50>
 8003cec:	2b25      	cmp	r3, #37	; 0x25
 8003cee:	d154      	bne.n	8003d9a <_vfiprintf_r+0xfa>
 8003cf0:	ebb8 0a07 	subs.w	sl, r8, r7
 8003cf4:	d00b      	beq.n	8003d0e <_vfiprintf_r+0x6e>
 8003cf6:	4653      	mov	r3, sl
 8003cf8:	463a      	mov	r2, r7
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f7ff ffbc 	bl	8003c7a <__sfputs_r>
 8003d02:	3001      	adds	r0, #1
 8003d04:	f000 80c2 	beq.w	8003e8c <_vfiprintf_r+0x1ec>
 8003d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0a:	4453      	add	r3, sl
 8003d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0e:	f898 3000 	ldrb.w	r3, [r8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80ba 	beq.w	8003e8c <_vfiprintf_r+0x1ec>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	9307      	str	r3, [sp, #28]
 8003d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8003d2c:	46a8      	mov	r8, r5
 8003d2e:	2205      	movs	r2, #5
 8003d30:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003d34:	485e      	ldr	r0, [pc, #376]	; (8003eb0 <_vfiprintf_r+0x210>)
 8003d36:	f7fc fa53 	bl	80001e0 <memchr>
 8003d3a:	9b04      	ldr	r3, [sp, #16]
 8003d3c:	bb78      	cbnz	r0, 8003d9e <_vfiprintf_r+0xfe>
 8003d3e:	06d9      	lsls	r1, r3, #27
 8003d40:	bf44      	itt	mi
 8003d42:	2220      	movmi	r2, #32
 8003d44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d48:	071a      	lsls	r2, r3, #28
 8003d4a:	bf44      	itt	mi
 8003d4c:	222b      	movmi	r2, #43	; 0x2b
 8003d4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d52:	782a      	ldrb	r2, [r5, #0]
 8003d54:	2a2a      	cmp	r2, #42	; 0x2a
 8003d56:	d02a      	beq.n	8003dae <_vfiprintf_r+0x10e>
 8003d58:	9a07      	ldr	r2, [sp, #28]
 8003d5a:	46a8      	mov	r8, r5
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	250a      	movs	r5, #10
 8003d60:	4641      	mov	r1, r8
 8003d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d66:	3b30      	subs	r3, #48	; 0x30
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	d969      	bls.n	8003e40 <_vfiprintf_r+0x1a0>
 8003d6c:	b360      	cbz	r0, 8003dc8 <_vfiprintf_r+0x128>
 8003d6e:	e024      	b.n	8003dba <_vfiprintf_r+0x11a>
 8003d70:	4b50      	ldr	r3, [pc, #320]	; (8003eb4 <_vfiprintf_r+0x214>)
 8003d72:	429c      	cmp	r4, r3
 8003d74:	d101      	bne.n	8003d7a <_vfiprintf_r+0xda>
 8003d76:	68b4      	ldr	r4, [r6, #8]
 8003d78:	e7a2      	b.n	8003cc0 <_vfiprintf_r+0x20>
 8003d7a:	4b4f      	ldr	r3, [pc, #316]	; (8003eb8 <_vfiprintf_r+0x218>)
 8003d7c:	429c      	cmp	r4, r3
 8003d7e:	bf08      	it	eq
 8003d80:	68f4      	ldreq	r4, [r6, #12]
 8003d82:	e79d      	b.n	8003cc0 <_vfiprintf_r+0x20>
 8003d84:	4621      	mov	r1, r4
 8003d86:	4630      	mov	r0, r6
 8003d88:	f7ff fc6c 	bl	8003664 <__swsetup_r>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d09d      	beq.n	8003ccc <_vfiprintf_r+0x2c>
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d94:	b01d      	add	sp, #116	; 0x74
 8003d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d9a:	46a8      	mov	r8, r5
 8003d9c:	e7a2      	b.n	8003ce4 <_vfiprintf_r+0x44>
 8003d9e:	4a44      	ldr	r2, [pc, #272]	; (8003eb0 <_vfiprintf_r+0x210>)
 8003da0:	1a80      	subs	r0, r0, r2
 8003da2:	fa0b f000 	lsl.w	r0, fp, r0
 8003da6:	4318      	orrs	r0, r3
 8003da8:	9004      	str	r0, [sp, #16]
 8003daa:	4645      	mov	r5, r8
 8003dac:	e7be      	b.n	8003d2c <_vfiprintf_r+0x8c>
 8003dae:	9a03      	ldr	r2, [sp, #12]
 8003db0:	1d11      	adds	r1, r2, #4
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	9103      	str	r1, [sp, #12]
 8003db6:	2a00      	cmp	r2, #0
 8003db8:	db01      	blt.n	8003dbe <_vfiprintf_r+0x11e>
 8003dba:	9207      	str	r2, [sp, #28]
 8003dbc:	e004      	b.n	8003dc8 <_vfiprintf_r+0x128>
 8003dbe:	4252      	negs	r2, r2
 8003dc0:	f043 0302 	orr.w	r3, r3, #2
 8003dc4:	9207      	str	r2, [sp, #28]
 8003dc6:	9304      	str	r3, [sp, #16]
 8003dc8:	f898 3000 	ldrb.w	r3, [r8]
 8003dcc:	2b2e      	cmp	r3, #46	; 0x2e
 8003dce:	d10e      	bne.n	8003dee <_vfiprintf_r+0x14e>
 8003dd0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd6:	d138      	bne.n	8003e4a <_vfiprintf_r+0x1aa>
 8003dd8:	9b03      	ldr	r3, [sp, #12]
 8003dda:	1d1a      	adds	r2, r3, #4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	9203      	str	r2, [sp, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bfb8      	it	lt
 8003de4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003de8:	f108 0802 	add.w	r8, r8, #2
 8003dec:	9305      	str	r3, [sp, #20]
 8003dee:	4d33      	ldr	r5, [pc, #204]	; (8003ebc <_vfiprintf_r+0x21c>)
 8003df0:	f898 1000 	ldrb.w	r1, [r8]
 8003df4:	2203      	movs	r2, #3
 8003df6:	4628      	mov	r0, r5
 8003df8:	f7fc f9f2 	bl	80001e0 <memchr>
 8003dfc:	b140      	cbz	r0, 8003e10 <_vfiprintf_r+0x170>
 8003dfe:	2340      	movs	r3, #64	; 0x40
 8003e00:	1b40      	subs	r0, r0, r5
 8003e02:	fa03 f000 	lsl.w	r0, r3, r0
 8003e06:	9b04      	ldr	r3, [sp, #16]
 8003e08:	4303      	orrs	r3, r0
 8003e0a:	f108 0801 	add.w	r8, r8, #1
 8003e0e:	9304      	str	r3, [sp, #16]
 8003e10:	f898 1000 	ldrb.w	r1, [r8]
 8003e14:	482a      	ldr	r0, [pc, #168]	; (8003ec0 <_vfiprintf_r+0x220>)
 8003e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e1a:	2206      	movs	r2, #6
 8003e1c:	f108 0701 	add.w	r7, r8, #1
 8003e20:	f7fc f9de 	bl	80001e0 <memchr>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	d037      	beq.n	8003e98 <_vfiprintf_r+0x1f8>
 8003e28:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <_vfiprintf_r+0x224>)
 8003e2a:	bb1b      	cbnz	r3, 8003e74 <_vfiprintf_r+0x1d4>
 8003e2c:	9b03      	ldr	r3, [sp, #12]
 8003e2e:	3307      	adds	r3, #7
 8003e30:	f023 0307 	bic.w	r3, r3, #7
 8003e34:	3308      	adds	r3, #8
 8003e36:	9303      	str	r3, [sp, #12]
 8003e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e3a:	444b      	add	r3, r9
 8003e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3e:	e750      	b.n	8003ce2 <_vfiprintf_r+0x42>
 8003e40:	fb05 3202 	mla	r2, r5, r2, r3
 8003e44:	2001      	movs	r0, #1
 8003e46:	4688      	mov	r8, r1
 8003e48:	e78a      	b.n	8003d60 <_vfiprintf_r+0xc0>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f108 0801 	add.w	r8, r8, #1
 8003e50:	9305      	str	r3, [sp, #20]
 8003e52:	4619      	mov	r1, r3
 8003e54:	250a      	movs	r5, #10
 8003e56:	4640      	mov	r0, r8
 8003e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e5c:	3a30      	subs	r2, #48	; 0x30
 8003e5e:	2a09      	cmp	r2, #9
 8003e60:	d903      	bls.n	8003e6a <_vfiprintf_r+0x1ca>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0c3      	beq.n	8003dee <_vfiprintf_r+0x14e>
 8003e66:	9105      	str	r1, [sp, #20]
 8003e68:	e7c1      	b.n	8003dee <_vfiprintf_r+0x14e>
 8003e6a:	fb05 2101 	mla	r1, r5, r1, r2
 8003e6e:	2301      	movs	r3, #1
 8003e70:	4680      	mov	r8, r0
 8003e72:	e7f0      	b.n	8003e56 <_vfiprintf_r+0x1b6>
 8003e74:	ab03      	add	r3, sp, #12
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	4622      	mov	r2, r4
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <_vfiprintf_r+0x228>)
 8003e7c:	a904      	add	r1, sp, #16
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f3af 8000 	nop.w
 8003e84:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003e88:	4681      	mov	r9, r0
 8003e8a:	d1d5      	bne.n	8003e38 <_vfiprintf_r+0x198>
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	065b      	lsls	r3, r3, #25
 8003e90:	f53f af7e 	bmi.w	8003d90 <_vfiprintf_r+0xf0>
 8003e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e96:	e77d      	b.n	8003d94 <_vfiprintf_r+0xf4>
 8003e98:	ab03      	add	r3, sp, #12
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <_vfiprintf_r+0x228>)
 8003ea0:	a904      	add	r1, sp, #16
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f000 f888 	bl	8003fb8 <_printf_i>
 8003ea8:	e7ec      	b.n	8003e84 <_vfiprintf_r+0x1e4>
 8003eaa:	bf00      	nop
 8003eac:	08004594 	.word	0x08004594
 8003eb0:	080045d4 	.word	0x080045d4
 8003eb4:	080045b4 	.word	0x080045b4
 8003eb8:	08004574 	.word	0x08004574
 8003ebc:	080045da 	.word	0x080045da
 8003ec0:	080045de 	.word	0x080045de
 8003ec4:	00000000 	.word	0x00000000
 8003ec8:	08003c7b 	.word	0x08003c7b

08003ecc <_printf_common>:
 8003ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed0:	4691      	mov	r9, r2
 8003ed2:	461f      	mov	r7, r3
 8003ed4:	688a      	ldr	r2, [r1, #8]
 8003ed6:	690b      	ldr	r3, [r1, #16]
 8003ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003edc:	4293      	cmp	r3, r2
 8003ede:	bfb8      	it	lt
 8003ee0:	4613      	movlt	r3, r2
 8003ee2:	f8c9 3000 	str.w	r3, [r9]
 8003ee6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eea:	4606      	mov	r6, r0
 8003eec:	460c      	mov	r4, r1
 8003eee:	b112      	cbz	r2, 8003ef6 <_printf_common+0x2a>
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f8c9 3000 	str.w	r3, [r9]
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	0699      	lsls	r1, r3, #26
 8003efa:	bf42      	ittt	mi
 8003efc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f00:	3302      	addmi	r3, #2
 8003f02:	f8c9 3000 	strmi.w	r3, [r9]
 8003f06:	6825      	ldr	r5, [r4, #0]
 8003f08:	f015 0506 	ands.w	r5, r5, #6
 8003f0c:	d107      	bne.n	8003f1e <_printf_common+0x52>
 8003f0e:	f104 0a19 	add.w	sl, r4, #25
 8003f12:	68e3      	ldr	r3, [r4, #12]
 8003f14:	f8d9 2000 	ldr.w	r2, [r9]
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	42ab      	cmp	r3, r5
 8003f1c:	dc28      	bgt.n	8003f70 <_printf_common+0xa4>
 8003f1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	3300      	adds	r3, #0
 8003f26:	bf18      	it	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	0692      	lsls	r2, r2, #26
 8003f2c:	d42d      	bmi.n	8003f8a <_printf_common+0xbe>
 8003f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f32:	4639      	mov	r1, r7
 8003f34:	4630      	mov	r0, r6
 8003f36:	47c0      	blx	r8
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d020      	beq.n	8003f7e <_printf_common+0xb2>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	68e5      	ldr	r5, [r4, #12]
 8003f40:	f8d9 2000 	ldr.w	r2, [r9]
 8003f44:	f003 0306 	and.w	r3, r3, #6
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	bf08      	it	eq
 8003f4c:	1aad      	subeq	r5, r5, r2
 8003f4e:	68a3      	ldr	r3, [r4, #8]
 8003f50:	6922      	ldr	r2, [r4, #16]
 8003f52:	bf0c      	ite	eq
 8003f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f58:	2500      	movne	r5, #0
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	bfc4      	itt	gt
 8003f5e:	1a9b      	subgt	r3, r3, r2
 8003f60:	18ed      	addgt	r5, r5, r3
 8003f62:	f04f 0900 	mov.w	r9, #0
 8003f66:	341a      	adds	r4, #26
 8003f68:	454d      	cmp	r5, r9
 8003f6a:	d11a      	bne.n	8003fa2 <_printf_common+0xd6>
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	e008      	b.n	8003f82 <_printf_common+0xb6>
 8003f70:	2301      	movs	r3, #1
 8003f72:	4652      	mov	r2, sl
 8003f74:	4639      	mov	r1, r7
 8003f76:	4630      	mov	r0, r6
 8003f78:	47c0      	blx	r8
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d103      	bne.n	8003f86 <_printf_common+0xba>
 8003f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f86:	3501      	adds	r5, #1
 8003f88:	e7c3      	b.n	8003f12 <_printf_common+0x46>
 8003f8a:	18e1      	adds	r1, r4, r3
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	2030      	movs	r0, #48	; 0x30
 8003f90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f94:	4422      	add	r2, r4
 8003f96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f9e:	3302      	adds	r3, #2
 8003fa0:	e7c5      	b.n	8003f2e <_printf_common+0x62>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4639      	mov	r1, r7
 8003fa8:	4630      	mov	r0, r6
 8003faa:	47c0      	blx	r8
 8003fac:	3001      	adds	r0, #1
 8003fae:	d0e6      	beq.n	8003f7e <_printf_common+0xb2>
 8003fb0:	f109 0901 	add.w	r9, r9, #1
 8003fb4:	e7d8      	b.n	8003f68 <_printf_common+0x9c>
	...

08003fb8 <_printf_i>:
 8003fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	7e09      	ldrb	r1, [r1, #24]
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	296e      	cmp	r1, #110	; 0x6e
 8003fc8:	4617      	mov	r7, r2
 8003fca:	4606      	mov	r6, r0
 8003fcc:	4698      	mov	r8, r3
 8003fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003fd0:	f000 80b3 	beq.w	800413a <_printf_i+0x182>
 8003fd4:	d822      	bhi.n	800401c <_printf_i+0x64>
 8003fd6:	2963      	cmp	r1, #99	; 0x63
 8003fd8:	d036      	beq.n	8004048 <_printf_i+0x90>
 8003fda:	d80a      	bhi.n	8003ff2 <_printf_i+0x3a>
 8003fdc:	2900      	cmp	r1, #0
 8003fde:	f000 80b9 	beq.w	8004154 <_printf_i+0x19c>
 8003fe2:	2958      	cmp	r1, #88	; 0x58
 8003fe4:	f000 8083 	beq.w	80040ee <_printf_i+0x136>
 8003fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ff0:	e032      	b.n	8004058 <_printf_i+0xa0>
 8003ff2:	2964      	cmp	r1, #100	; 0x64
 8003ff4:	d001      	beq.n	8003ffa <_printf_i+0x42>
 8003ff6:	2969      	cmp	r1, #105	; 0x69
 8003ff8:	d1f6      	bne.n	8003fe8 <_printf_i+0x30>
 8003ffa:	6820      	ldr	r0, [r4, #0]
 8003ffc:	6813      	ldr	r3, [r2, #0]
 8003ffe:	0605      	lsls	r5, r0, #24
 8004000:	f103 0104 	add.w	r1, r3, #4
 8004004:	d52a      	bpl.n	800405c <_printf_i+0xa4>
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6011      	str	r1, [r2, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	da03      	bge.n	8004016 <_printf_i+0x5e>
 800400e:	222d      	movs	r2, #45	; 0x2d
 8004010:	425b      	negs	r3, r3
 8004012:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004016:	486f      	ldr	r0, [pc, #444]	; (80041d4 <_printf_i+0x21c>)
 8004018:	220a      	movs	r2, #10
 800401a:	e039      	b.n	8004090 <_printf_i+0xd8>
 800401c:	2973      	cmp	r1, #115	; 0x73
 800401e:	f000 809d 	beq.w	800415c <_printf_i+0x1a4>
 8004022:	d808      	bhi.n	8004036 <_printf_i+0x7e>
 8004024:	296f      	cmp	r1, #111	; 0x6f
 8004026:	d020      	beq.n	800406a <_printf_i+0xb2>
 8004028:	2970      	cmp	r1, #112	; 0x70
 800402a:	d1dd      	bne.n	8003fe8 <_printf_i+0x30>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	f043 0320 	orr.w	r3, r3, #32
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	e003      	b.n	800403e <_printf_i+0x86>
 8004036:	2975      	cmp	r1, #117	; 0x75
 8004038:	d017      	beq.n	800406a <_printf_i+0xb2>
 800403a:	2978      	cmp	r1, #120	; 0x78
 800403c:	d1d4      	bne.n	8003fe8 <_printf_i+0x30>
 800403e:	2378      	movs	r3, #120	; 0x78
 8004040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004044:	4864      	ldr	r0, [pc, #400]	; (80041d8 <_printf_i+0x220>)
 8004046:	e055      	b.n	80040f4 <_printf_i+0x13c>
 8004048:	6813      	ldr	r3, [r2, #0]
 800404a:	1d19      	adds	r1, r3, #4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6011      	str	r1, [r2, #0]
 8004050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004058:	2301      	movs	r3, #1
 800405a:	e08c      	b.n	8004176 <_printf_i+0x1be>
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6011      	str	r1, [r2, #0]
 8004060:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004064:	bf18      	it	ne
 8004066:	b21b      	sxthne	r3, r3
 8004068:	e7cf      	b.n	800400a <_printf_i+0x52>
 800406a:	6813      	ldr	r3, [r2, #0]
 800406c:	6825      	ldr	r5, [r4, #0]
 800406e:	1d18      	adds	r0, r3, #4
 8004070:	6010      	str	r0, [r2, #0]
 8004072:	0628      	lsls	r0, r5, #24
 8004074:	d501      	bpl.n	800407a <_printf_i+0xc2>
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	e002      	b.n	8004080 <_printf_i+0xc8>
 800407a:	0668      	lsls	r0, r5, #25
 800407c:	d5fb      	bpl.n	8004076 <_printf_i+0xbe>
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	4854      	ldr	r0, [pc, #336]	; (80041d4 <_printf_i+0x21c>)
 8004082:	296f      	cmp	r1, #111	; 0x6f
 8004084:	bf14      	ite	ne
 8004086:	220a      	movne	r2, #10
 8004088:	2208      	moveq	r2, #8
 800408a:	2100      	movs	r1, #0
 800408c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004090:	6865      	ldr	r5, [r4, #4]
 8004092:	60a5      	str	r5, [r4, #8]
 8004094:	2d00      	cmp	r5, #0
 8004096:	f2c0 8095 	blt.w	80041c4 <_printf_i+0x20c>
 800409a:	6821      	ldr	r1, [r4, #0]
 800409c:	f021 0104 	bic.w	r1, r1, #4
 80040a0:	6021      	str	r1, [r4, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d13d      	bne.n	8004122 <_printf_i+0x16a>
 80040a6:	2d00      	cmp	r5, #0
 80040a8:	f040 808e 	bne.w	80041c8 <_printf_i+0x210>
 80040ac:	4665      	mov	r5, ip
 80040ae:	2a08      	cmp	r2, #8
 80040b0:	d10b      	bne.n	80040ca <_printf_i+0x112>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	07db      	lsls	r3, r3, #31
 80040b6:	d508      	bpl.n	80040ca <_printf_i+0x112>
 80040b8:	6923      	ldr	r3, [r4, #16]
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	bfde      	ittt	le
 80040c0:	2330      	movle	r3, #48	; 0x30
 80040c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040c6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040ca:	ebac 0305 	sub.w	r3, ip, r5
 80040ce:	6123      	str	r3, [r4, #16]
 80040d0:	f8cd 8000 	str.w	r8, [sp]
 80040d4:	463b      	mov	r3, r7
 80040d6:	aa03      	add	r2, sp, #12
 80040d8:	4621      	mov	r1, r4
 80040da:	4630      	mov	r0, r6
 80040dc:	f7ff fef6 	bl	8003ecc <_printf_common>
 80040e0:	3001      	adds	r0, #1
 80040e2:	d14d      	bne.n	8004180 <_printf_i+0x1c8>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e8:	b005      	add	sp, #20
 80040ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040ee:	4839      	ldr	r0, [pc, #228]	; (80041d4 <_printf_i+0x21c>)
 80040f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80040f4:	6813      	ldr	r3, [r2, #0]
 80040f6:	6821      	ldr	r1, [r4, #0]
 80040f8:	1d1d      	adds	r5, r3, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6015      	str	r5, [r2, #0]
 80040fe:	060a      	lsls	r2, r1, #24
 8004100:	d50b      	bpl.n	800411a <_printf_i+0x162>
 8004102:	07ca      	lsls	r2, r1, #31
 8004104:	bf44      	itt	mi
 8004106:	f041 0120 	orrmi.w	r1, r1, #32
 800410a:	6021      	strmi	r1, [r4, #0]
 800410c:	b91b      	cbnz	r3, 8004116 <_printf_i+0x15e>
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	f022 0220 	bic.w	r2, r2, #32
 8004114:	6022      	str	r2, [r4, #0]
 8004116:	2210      	movs	r2, #16
 8004118:	e7b7      	b.n	800408a <_printf_i+0xd2>
 800411a:	064d      	lsls	r5, r1, #25
 800411c:	bf48      	it	mi
 800411e:	b29b      	uxthmi	r3, r3
 8004120:	e7ef      	b.n	8004102 <_printf_i+0x14a>
 8004122:	4665      	mov	r5, ip
 8004124:	fbb3 f1f2 	udiv	r1, r3, r2
 8004128:	fb02 3311 	mls	r3, r2, r1, r3
 800412c:	5cc3      	ldrb	r3, [r0, r3]
 800412e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004132:	460b      	mov	r3, r1
 8004134:	2900      	cmp	r1, #0
 8004136:	d1f5      	bne.n	8004124 <_printf_i+0x16c>
 8004138:	e7b9      	b.n	80040ae <_printf_i+0xf6>
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	6825      	ldr	r5, [r4, #0]
 800413e:	6961      	ldr	r1, [r4, #20]
 8004140:	1d18      	adds	r0, r3, #4
 8004142:	6010      	str	r0, [r2, #0]
 8004144:	0628      	lsls	r0, r5, #24
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	d501      	bpl.n	800414e <_printf_i+0x196>
 800414a:	6019      	str	r1, [r3, #0]
 800414c:	e002      	b.n	8004154 <_printf_i+0x19c>
 800414e:	066a      	lsls	r2, r5, #25
 8004150:	d5fb      	bpl.n	800414a <_printf_i+0x192>
 8004152:	8019      	strh	r1, [r3, #0]
 8004154:	2300      	movs	r3, #0
 8004156:	6123      	str	r3, [r4, #16]
 8004158:	4665      	mov	r5, ip
 800415a:	e7b9      	b.n	80040d0 <_printf_i+0x118>
 800415c:	6813      	ldr	r3, [r2, #0]
 800415e:	1d19      	adds	r1, r3, #4
 8004160:	6011      	str	r1, [r2, #0]
 8004162:	681d      	ldr	r5, [r3, #0]
 8004164:	6862      	ldr	r2, [r4, #4]
 8004166:	2100      	movs	r1, #0
 8004168:	4628      	mov	r0, r5
 800416a:	f7fc f839 	bl	80001e0 <memchr>
 800416e:	b108      	cbz	r0, 8004174 <_printf_i+0x1bc>
 8004170:	1b40      	subs	r0, r0, r5
 8004172:	6060      	str	r0, [r4, #4]
 8004174:	6863      	ldr	r3, [r4, #4]
 8004176:	6123      	str	r3, [r4, #16]
 8004178:	2300      	movs	r3, #0
 800417a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800417e:	e7a7      	b.n	80040d0 <_printf_i+0x118>
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	462a      	mov	r2, r5
 8004184:	4639      	mov	r1, r7
 8004186:	4630      	mov	r0, r6
 8004188:	47c0      	blx	r8
 800418a:	3001      	adds	r0, #1
 800418c:	d0aa      	beq.n	80040e4 <_printf_i+0x12c>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	079b      	lsls	r3, r3, #30
 8004192:	d413      	bmi.n	80041bc <_printf_i+0x204>
 8004194:	68e0      	ldr	r0, [r4, #12]
 8004196:	9b03      	ldr	r3, [sp, #12]
 8004198:	4298      	cmp	r0, r3
 800419a:	bfb8      	it	lt
 800419c:	4618      	movlt	r0, r3
 800419e:	e7a3      	b.n	80040e8 <_printf_i+0x130>
 80041a0:	2301      	movs	r3, #1
 80041a2:	464a      	mov	r2, r9
 80041a4:	4639      	mov	r1, r7
 80041a6:	4630      	mov	r0, r6
 80041a8:	47c0      	blx	r8
 80041aa:	3001      	adds	r0, #1
 80041ac:	d09a      	beq.n	80040e4 <_printf_i+0x12c>
 80041ae:	3501      	adds	r5, #1
 80041b0:	68e3      	ldr	r3, [r4, #12]
 80041b2:	9a03      	ldr	r2, [sp, #12]
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	42ab      	cmp	r3, r5
 80041b8:	dcf2      	bgt.n	80041a0 <_printf_i+0x1e8>
 80041ba:	e7eb      	b.n	8004194 <_printf_i+0x1dc>
 80041bc:	2500      	movs	r5, #0
 80041be:	f104 0919 	add.w	r9, r4, #25
 80041c2:	e7f5      	b.n	80041b0 <_printf_i+0x1f8>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ac      	bne.n	8004122 <_printf_i+0x16a>
 80041c8:	7803      	ldrb	r3, [r0, #0]
 80041ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041d2:	e76c      	b.n	80040ae <_printf_i+0xf6>
 80041d4:	080045e5 	.word	0x080045e5
 80041d8:	080045f6 	.word	0x080045f6

080041dc <_putc_r>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	460d      	mov	r5, r1
 80041e0:	4614      	mov	r4, r2
 80041e2:	4606      	mov	r6, r0
 80041e4:	b118      	cbz	r0, 80041ee <_putc_r+0x12>
 80041e6:	6983      	ldr	r3, [r0, #24]
 80041e8:	b90b      	cbnz	r3, 80041ee <_putc_r+0x12>
 80041ea:	f7ff fb99 	bl	8003920 <__sinit>
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <_putc_r+0x60>)
 80041f0:	429c      	cmp	r4, r3
 80041f2:	d112      	bne.n	800421a <_putc_r+0x3e>
 80041f4:	6874      	ldr	r4, [r6, #4]
 80041f6:	68a3      	ldr	r3, [r4, #8]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	60a3      	str	r3, [r4, #8]
 80041fe:	da16      	bge.n	800422e <_putc_r+0x52>
 8004200:	69a2      	ldr	r2, [r4, #24]
 8004202:	4293      	cmp	r3, r2
 8004204:	db02      	blt.n	800420c <_putc_r+0x30>
 8004206:	b2eb      	uxtb	r3, r5
 8004208:	2b0a      	cmp	r3, #10
 800420a:	d110      	bne.n	800422e <_putc_r+0x52>
 800420c:	4622      	mov	r2, r4
 800420e:	4629      	mov	r1, r5
 8004210:	4630      	mov	r0, r6
 8004212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004216:	f7ff b9d3 	b.w	80035c0 <__swbuf_r>
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <_putc_r+0x64>)
 800421c:	429c      	cmp	r4, r3
 800421e:	d101      	bne.n	8004224 <_putc_r+0x48>
 8004220:	68b4      	ldr	r4, [r6, #8]
 8004222:	e7e8      	b.n	80041f6 <_putc_r+0x1a>
 8004224:	4b07      	ldr	r3, [pc, #28]	; (8004244 <_putc_r+0x68>)
 8004226:	429c      	cmp	r4, r3
 8004228:	bf08      	it	eq
 800422a:	68f4      	ldreq	r4, [r6, #12]
 800422c:	e7e3      	b.n	80041f6 <_putc_r+0x1a>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	6022      	str	r2, [r4, #0]
 8004234:	701d      	strb	r5, [r3, #0]
 8004236:	b2e8      	uxtb	r0, r5
 8004238:	bd70      	pop	{r4, r5, r6, pc}
 800423a:	bf00      	nop
 800423c:	08004594 	.word	0x08004594
 8004240:	080045b4 	.word	0x080045b4
 8004244:	08004574 	.word	0x08004574

08004248 <_sbrk_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4c06      	ldr	r4, [pc, #24]	; (8004264 <_sbrk_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4605      	mov	r5, r0
 8004250:	4608      	mov	r0, r1
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	f7fc ff06 	bl	8001064 <_sbrk>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_sbrk_r+0x1a>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	b103      	cbz	r3, 8004262 <_sbrk_r+0x1a>
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200001d4 	.word	0x200001d4

08004268 <__sread>:
 8004268:	b510      	push	{r4, lr}
 800426a:	460c      	mov	r4, r1
 800426c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004270:	f000 f896 	bl	80043a0 <_read_r>
 8004274:	2800      	cmp	r0, #0
 8004276:	bfab      	itete	ge
 8004278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800427a:	89a3      	ldrhlt	r3, [r4, #12]
 800427c:	181b      	addge	r3, r3, r0
 800427e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004282:	bfac      	ite	ge
 8004284:	6563      	strge	r3, [r4, #84]	; 0x54
 8004286:	81a3      	strhlt	r3, [r4, #12]
 8004288:	bd10      	pop	{r4, pc}

0800428a <__swrite>:
 800428a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800428e:	461f      	mov	r7, r3
 8004290:	898b      	ldrh	r3, [r1, #12]
 8004292:	05db      	lsls	r3, r3, #23
 8004294:	4605      	mov	r5, r0
 8004296:	460c      	mov	r4, r1
 8004298:	4616      	mov	r6, r2
 800429a:	d505      	bpl.n	80042a8 <__swrite+0x1e>
 800429c:	2302      	movs	r3, #2
 800429e:	2200      	movs	r2, #0
 80042a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042a4:	f000 f868 	bl	8004378 <_lseek_r>
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	4632      	mov	r2, r6
 80042b6:	463b      	mov	r3, r7
 80042b8:	4628      	mov	r0, r5
 80042ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042be:	f000 b817 	b.w	80042f0 <_write_r>

080042c2 <__sseek>:
 80042c2:	b510      	push	{r4, lr}
 80042c4:	460c      	mov	r4, r1
 80042c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ca:	f000 f855 	bl	8004378 <_lseek_r>
 80042ce:	1c43      	adds	r3, r0, #1
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	bf15      	itete	ne
 80042d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80042d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042de:	81a3      	strheq	r3, [r4, #12]
 80042e0:	bf18      	it	ne
 80042e2:	81a3      	strhne	r3, [r4, #12]
 80042e4:	bd10      	pop	{r4, pc}

080042e6 <__sclose>:
 80042e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ea:	f000 b813 	b.w	8004314 <_close_r>
	...

080042f0 <_write_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4c07      	ldr	r4, [pc, #28]	; (8004310 <_write_r+0x20>)
 80042f4:	4605      	mov	r5, r0
 80042f6:	4608      	mov	r0, r1
 80042f8:	4611      	mov	r1, r2
 80042fa:	2200      	movs	r2, #0
 80042fc:	6022      	str	r2, [r4, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	f7fc fe5f 	bl	8000fc2 <_write>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d102      	bne.n	800430e <_write_r+0x1e>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	b103      	cbz	r3, 800430e <_write_r+0x1e>
 800430c:	602b      	str	r3, [r5, #0]
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	200001d4 	.word	0x200001d4

08004314 <_close_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	4c06      	ldr	r4, [pc, #24]	; (8004330 <_close_r+0x1c>)
 8004318:	2300      	movs	r3, #0
 800431a:	4605      	mov	r5, r0
 800431c:	4608      	mov	r0, r1
 800431e:	6023      	str	r3, [r4, #0]
 8004320:	f7fc fe6b 	bl	8000ffa <_close>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d102      	bne.n	800432e <_close_r+0x1a>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	b103      	cbz	r3, 800432e <_close_r+0x1a>
 800432c:	602b      	str	r3, [r5, #0]
 800432e:	bd38      	pop	{r3, r4, r5, pc}
 8004330:	200001d4 	.word	0x200001d4

08004334 <_fstat_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	4c07      	ldr	r4, [pc, #28]	; (8004354 <_fstat_r+0x20>)
 8004338:	2300      	movs	r3, #0
 800433a:	4605      	mov	r5, r0
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	f7fc fe66 	bl	8001012 <_fstat>
 8004346:	1c43      	adds	r3, r0, #1
 8004348:	d102      	bne.n	8004350 <_fstat_r+0x1c>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	b103      	cbz	r3, 8004350 <_fstat_r+0x1c>
 800434e:	602b      	str	r3, [r5, #0]
 8004350:	bd38      	pop	{r3, r4, r5, pc}
 8004352:	bf00      	nop
 8004354:	200001d4 	.word	0x200001d4

08004358 <_isatty_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4c06      	ldr	r4, [pc, #24]	; (8004374 <_isatty_r+0x1c>)
 800435c:	2300      	movs	r3, #0
 800435e:	4605      	mov	r5, r0
 8004360:	4608      	mov	r0, r1
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	f7fc fe65 	bl	8001032 <_isatty>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_isatty_r+0x1a>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	b103      	cbz	r3, 8004372 <_isatty_r+0x1a>
 8004370:	602b      	str	r3, [r5, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	200001d4 	.word	0x200001d4

08004378 <_lseek_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4c07      	ldr	r4, [pc, #28]	; (8004398 <_lseek_r+0x20>)
 800437c:	4605      	mov	r5, r0
 800437e:	4608      	mov	r0, r1
 8004380:	4611      	mov	r1, r2
 8004382:	2200      	movs	r2, #0
 8004384:	6022      	str	r2, [r4, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	f7fc fe5e 	bl	8001048 <_lseek>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_lseek_r+0x1e>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	b103      	cbz	r3, 8004396 <_lseek_r+0x1e>
 8004394:	602b      	str	r3, [r5, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	200001d4 	.word	0x200001d4

0800439c <__malloc_lock>:
 800439c:	4770      	bx	lr

0800439e <__malloc_unlock>:
 800439e:	4770      	bx	lr

080043a0 <_read_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4c07      	ldr	r4, [pc, #28]	; (80043c0 <_read_r+0x20>)
 80043a4:	4605      	mov	r5, r0
 80043a6:	4608      	mov	r0, r1
 80043a8:	4611      	mov	r1, r2
 80043aa:	2200      	movs	r2, #0
 80043ac:	6022      	str	r2, [r4, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f7fc fdea 	bl	8000f88 <_read>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_read_r+0x1e>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	b103      	cbz	r3, 80043be <_read_r+0x1e>
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	200001d4 	.word	0x200001d4

080043c4 <_init>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr

080043d0 <_fini>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr
